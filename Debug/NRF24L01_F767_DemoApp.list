
NRF24L01_F767_DemoApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f00  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080050f8  080050f8  000150f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005110  08005110  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  08005110  08005110  00015110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005118  08005118  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005118  08005118  00015118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800511c  0800511c  0001511c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08005120  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000020  08005140  00020020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000c0  080051e0  000200c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000704  20000160  08005280  00020160  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000864  08005280  00020864  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014bfa  00000000  00000000  0002018e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002706  00000000  00000000  00034d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f90  00000000  00000000  00037490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000e98  00000000  00000000  00038420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028e2a  00000000  00000000  000392b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000123f8  00000000  00000000  000620e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fba8c  00000000  00000000  000744da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0016ff66  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004118  00000000  00000000  0016ffb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000160 	.word	0x20000160
 8000214:	00000000 	.word	0x00000000
 8000218:	080050e0 	.word	0x080050e0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000164 	.word	0x20000164
 8000234:	080050e0 	.word	0x080050e0

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <CS_Select>:
extern SPI_HandleTypeDef hspi3;
#define NRF24_SPI		&hspi3


void CS_Select(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CS_PORT, NRF24_CS_PIN, GPIO_PIN_RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000546:	4802      	ldr	r0, [pc, #8]	; (8000550 <CS_Select+0x14>)
 8000548:	f001 fc0a 	bl	8001d60 <HAL_GPIO_WritePin>
}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}
 8000550:	40020800 	.word	0x40020800

08000554 <CS_UnSelect>:

void CS_UnSelect(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CS_PORT, NRF24_CS_PIN, GPIO_PIN_SET);
 8000558:	2201      	movs	r2, #1
 800055a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800055e:	4802      	ldr	r0, [pc, #8]	; (8000568 <CS_UnSelect+0x14>)
 8000560:	f001 fbfe 	bl	8001d60 <HAL_GPIO_WritePin>
}
 8000564:	bf00      	nop
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40020800 	.word	0x40020800

0800056c <CE_Enable>:

void CE_Enable(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8000570:	2201      	movs	r2, #1
 8000572:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000576:	4802      	ldr	r0, [pc, #8]	; (8000580 <CE_Enable+0x14>)
 8000578:	f001 fbf2 	bl	8001d60 <HAL_GPIO_WritePin>
}
 800057c:	bf00      	nop
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40020800 	.word	0x40020800

08000584 <CE_Disable>:

void CE_Disable(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800058e:	4802      	ldr	r0, [pc, #8]	; (8000598 <CE_Disable+0x14>)
 8000590:	f001 fbe6 	bl	8001d60 <HAL_GPIO_WritePin>
}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40020800 	.word	0x40020800

0800059c <nrf24_writeReg>:

void nrf24_writeReg(uint8_t Reg, uint8_t Data)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	460a      	mov	r2, r1
 80005a6:	71fb      	strb	r3, [r7, #7]
 80005a8:	4613      	mov	r3, r2
 80005aa:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg | (1<<5);
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	f043 0320 	orr.w	r3, r3, #32
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 80005b6:	79bb      	ldrb	r3, [r7, #6]
 80005b8:	737b      	strb	r3, [r7, #13]

	// Pull the CS to low
	CS_Select();
 80005ba:	f7ff ffbf 	bl	800053c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, HAL_MAX_DELAY);
 80005be:	f107 010c 	add.w	r1, r7, #12
 80005c2:	f04f 33ff 	mov.w	r3, #4294967295
 80005c6:	2202      	movs	r2, #2
 80005c8:	4804      	ldr	r0, [pc, #16]	; (80005dc <nrf24_writeReg+0x40>)
 80005ca:	f002 ff4c 	bl	8003466 <HAL_SPI_Transmit>

	// Pull the CS High to release the device
	CS_UnSelect();
 80005ce:	f7ff ffc1 	bl	8000554 <CS_UnSelect>
}
 80005d2:	bf00      	nop
 80005d4:	3710      	adds	r7, #16
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000264 	.word	0x20000264

080005e0 <nrf24_writeRegMulti>:

// write multiple bytes starting from a particular register
void nrf24_writeRegMulti(uint8_t Reg, uint8_t *data, uint32_t size)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	607a      	str	r2, [r7, #4]
 80005ec:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg | (1<<5);
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	f043 0320 	orr.w	r3, r3, #32
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	753b      	strb	r3, [r7, #20]

	// Pull the CS to low
	CS_Select();
 80005f8:	f7ff ffa0 	bl	800053c <CS_Select>

	// Send the address first and then the data
	HAL_SPI_Transmit(NRF24_SPI, buf, 1, HAL_MAX_DELAY);
 80005fc:	f107 0114 	add.w	r1, r7, #20
 8000600:	f04f 33ff 	mov.w	r3, #4294967295
 8000604:	2201      	movs	r2, #1
 8000606:	4808      	ldr	r0, [pc, #32]	; (8000628 <nrf24_writeRegMulti+0x48>)
 8000608:	f002 ff2d 	bl	8003466 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, HAL_MAX_DELAY);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	b29a      	uxth	r2, r3
 8000610:	f04f 33ff 	mov.w	r3, #4294967295
 8000614:	68b9      	ldr	r1, [r7, #8]
 8000616:	4804      	ldr	r0, [pc, #16]	; (8000628 <nrf24_writeRegMulti+0x48>)
 8000618:	f002 ff25 	bl	8003466 <HAL_SPI_Transmit>

	// Pull the CS High to release the device
	CS_UnSelect();
 800061c:	f7ff ff9a 	bl	8000554 <CS_UnSelect>
}
 8000620:	bf00      	nop
 8000622:	3718      	adds	r7, #24
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000264 	.word	0x20000264

0800062c <nrf24_ReadReg>:

uint8_t nrf24_ReadReg(uint8_t Reg)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	73fb      	strb	r3, [r7, #15]

	// Pull the CS to low
	CS_Select();
 800063a:	f7ff ff7f 	bl	800053c <CS_Select>

	// Send the register to read
	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, HAL_MAX_DELAY);
 800063e:	1df9      	adds	r1, r7, #7
 8000640:	f04f 33ff 	mov.w	r3, #4294967295
 8000644:	2201      	movs	r2, #1
 8000646:	4809      	ldr	r0, [pc, #36]	; (800066c <nrf24_ReadReg+0x40>)
 8000648:	f002 ff0d 	bl	8003466 <HAL_SPI_Transmit>

	// Received the data
	HAL_SPI_Receive(NRF24_SPI, &data, 1, HAL_MAX_DELAY);
 800064c:	f107 010f 	add.w	r1, r7, #15
 8000650:	f04f 33ff 	mov.w	r3, #4294967295
 8000654:	2201      	movs	r2, #1
 8000656:	4805      	ldr	r0, [pc, #20]	; (800066c <nrf24_ReadReg+0x40>)
 8000658:	f003 f873 	bl	8003742 <HAL_SPI_Receive>

	// Pull the CS High to release the device
	CS_UnSelect();
 800065c:	f7ff ff7a 	bl	8000554 <CS_UnSelect>

	return data;
 8000660:	7bfb      	ldrb	r3, [r7, #15]
}
 8000662:	4618      	mov	r0, r3
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000264 	.word	0x20000264

08000670 <nrf24SendCmd>:
	CS_UnSelect();
}


void nrf24SendCmd(uint8_t cmd)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
	// Pull the CS to low
	CS_Select();
 800067a:	f7ff ff5f 	bl	800053c <CS_Select>

	// Send the cmd
	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, HAL_MAX_DELAY);
 800067e:	1df9      	adds	r1, r7, #7
 8000680:	f04f 33ff 	mov.w	r3, #4294967295
 8000684:	2201      	movs	r2, #1
 8000686:	4804      	ldr	r0, [pc, #16]	; (8000698 <nrf24SendCmd+0x28>)
 8000688:	f002 feed 	bl	8003466 <HAL_SPI_Transmit>

	// Pull the CS High to release the device
	CS_UnSelect();
 800068c:	f7ff ff62 	bl	8000554 <CS_UnSelect>

}
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000264 	.word	0x20000264

0800069c <NRF24_Init>:


void NRF24_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 80006a0:	f7ff ff70 	bl	8000584 <CE_Disable>

	// will be configured later
	nrf24_writeReg(NRF24_CONFIG, 0);
 80006a4:	2100      	movs	r1, #0
 80006a6:	2000      	movs	r0, #0
 80006a8:	f7ff ff78 	bl	800059c <nrf24_writeReg>

	// No auto ACK
	nrf24_writeReg(NRF24_EN_AA, 0);
 80006ac:	2100      	movs	r1, #0
 80006ae:	2001      	movs	r0, #1
 80006b0:	f7ff ff74 	bl	800059c <nrf24_writeReg>

	// Not enabling any data pipe right now
	nrf24_writeReg(NRF24_EN_RXADDR, 0);
 80006b4:	2100      	movs	r1, #0
 80006b6:	2002      	movs	r0, #2
 80006b8:	f7ff ff70 	bl	800059c <nrf24_writeReg>

	// 5 bytes for the TX/RX address
	nrf24_writeReg(NRF24_SETUP_AW, 0x03);
 80006bc:	2103      	movs	r1, #3
 80006be:	2003      	movs	r0, #3
 80006c0:	f7ff ff6c 	bl	800059c <nrf24_writeReg>

	// No retransmission
	nrf24_writeReg(NRF24_SETUP_RETR, 0);
 80006c4:	2100      	movs	r1, #0
 80006c6:	2004      	movs	r0, #4
 80006c8:	f7ff ff68 	bl	800059c <nrf24_writeReg>

	// Will be setup during Tx or Rx
	nrf24_writeReg(NRF24_RF_CH, 0);
 80006cc:	2100      	movs	r1, #0
 80006ce:	2005      	movs	r0, #5
 80006d0:	f7ff ff64 	bl	800059c <nrf24_writeReg>

	// Power=0db, data rate = 2Mbps
	nrf24_writeReg(NRF24_RF_SETUP, 0x0E);
 80006d4:	210e      	movs	r1, #14
 80006d6:	2006      	movs	r0, #6
 80006d8:	f7ff ff60 	bl	800059c <nrf24_writeReg>

	// Enable the chip after configuring the device
	CE_Enable();
 80006dc:	f7ff ff46 	bl	800056c <CE_Enable>
}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <NRF24_TxMode>:


// set up the Tx mode
void NRF24_TxMode(uint8_t *addr, uint8_t channel)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	460b      	mov	r3, r1
 80006ee:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 80006f0:	f7ff ff48 	bl	8000584 <CE_Disable>

	// Select the channel
	nrf24_writeReg(NRF24_RF_CH, channel);
 80006f4:	78fb      	ldrb	r3, [r7, #3]
 80006f6:	4619      	mov	r1, r3
 80006f8:	2005      	movs	r0, #5
 80006fa:	f7ff ff4f 	bl	800059c <nrf24_writeReg>

	// Write the tx address
	nrf24_writeRegMulti(NRF24_TX_ADDR, addr,5);
 80006fe:	2205      	movs	r2, #5
 8000700:	6879      	ldr	r1, [r7, #4]
 8000702:	2010      	movs	r0, #16
 8000704:	f7ff ff6c 	bl	80005e0 <nrf24_writeRegMulti>

	// Power up the device
	uint8_t config = nrf24_ReadReg(NRF24_CONFIG);
 8000708:	2000      	movs	r0, #0
 800070a:	f7ff ff8f 	bl	800062c <nrf24_ReadReg>
 800070e:	4603      	mov	r3, r0
 8000710:	73fb      	strb	r3, [r7, #15]
	config |= (1 << 1);
 8000712:	7bfb      	ldrb	r3, [r7, #15]
 8000714:	f043 0302 	orr.w	r3, r3, #2
 8000718:	73fb      	strb	r3, [r7, #15]
	nrf24_writeReg(NRF24_CONFIG, config);
 800071a:	7bfb      	ldrb	r3, [r7, #15]
 800071c:	4619      	mov	r1, r3
 800071e:	2000      	movs	r0, #0
 8000720:	f7ff ff3c 	bl	800059c <nrf24_writeReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8000724:	f7ff ff22 	bl	800056c <CE_Enable>
}
 8000728:	bf00      	nop
 800072a:	3710      	adds	r7, #16
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <NRF24_Transmit>:


// transmit the data
uint8_t NRF24_Transmit(uint8_t *data)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	uint8_t cmd_to_send=0;
 8000738:	2300      	movs	r3, #0
 800073a:	73bb      	strb	r3, [r7, #14]

	// select the device
	CS_Select();
 800073c:	f7ff fefe 	bl	800053c <CS_Select>

	// payload command
	cmd_to_send=NRF24_W_TX_PAYLOAD;
 8000740:	23a0      	movs	r3, #160	; 0xa0
 8000742:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(NRF24_SPI, &cmd_to_send, 1, HAL_MAX_DELAY);
 8000744:	f107 010e 	add.w	r1, r7, #14
 8000748:	f04f 33ff 	mov.w	r3, #4294967295
 800074c:	2201      	movs	r2, #1
 800074e:	4815      	ldr	r0, [pc, #84]	; (80007a4 <NRF24_Transmit+0x74>)
 8000750:	f002 fe89 	bl	8003466 <HAL_SPI_Transmit>

	// send the payload
	HAL_SPI_Transmit(NRF24_SPI, data, 32, 1000);
 8000754:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000758:	2220      	movs	r2, #32
 800075a:	6879      	ldr	r1, [r7, #4]
 800075c:	4811      	ldr	r0, [pc, #68]	; (80007a4 <NRF24_Transmit+0x74>)
 800075e:	f002 fe82 	bl	8003466 <HAL_SPI_Transmit>

	// Select the device
	CS_Select();
 8000762:	f7ff feeb 	bl	800053c <CS_Select>

	HAL_Delay(10);
 8000766:	200a      	movs	r0, #10
 8000768:	f000 fd1e 	bl	80011a8 <HAL_Delay>

	uint8_t fifostatus = nrf24_ReadReg(NRF24_FIFO_STATUS);
 800076c:	2017      	movs	r0, #23
 800076e:	f7ff ff5d 	bl	800062c <nrf24_ReadReg>
 8000772:	4603      	mov	r3, r0
 8000774:	73fb      	strb	r3, [r7, #15]

	if((fifostatus & (1 << 4)) && !(fifostatus & (1<<3)))
 8000776:	7bfb      	ldrb	r3, [r7, #15]
 8000778:	f003 0310 	and.w	r3, r3, #16
 800077c:	2b00      	cmp	r3, #0
 800077e:	d00c      	beq.n	800079a <NRF24_Transmit+0x6a>
 8000780:	7bfb      	ldrb	r3, [r7, #15]
 8000782:	f003 0308 	and.w	r3, r3, #8
 8000786:	2b00      	cmp	r3, #0
 8000788:	d107      	bne.n	800079a <NRF24_Transmit+0x6a>
	{
		cmd_to_send = NRF24_FLUSH_TX;
 800078a:	23e1      	movs	r3, #225	; 0xe1
 800078c:	73bb      	strb	r3, [r7, #14]
		nrf24SendCmd(cmd_to_send);
 800078e:	7bbb      	ldrb	r3, [r7, #14]
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff ff6d 	bl	8000670 <nrf24SendCmd>

		return 1;
 8000796:	2301      	movs	r3, #1
 8000798:	e000      	b.n	800079c <NRF24_Transmit+0x6c>
	}
	return 0;
 800079a:	2300      	movs	r3, #0
}
 800079c:	4618      	mov	r0, r3
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000264 	.word	0x20000264

080007a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ac:	f000 fc9f 	bl	80010ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b0:	f000 f826 	bl	8000800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b4:	f000 f980 	bl	8000ab8 <MX_GPIO_Init>
  MX_ETH_Init();
 80007b8:	f000 f894 	bl	80008e4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80007bc:	f000 f91e 	bl	80009fc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007c0:	f000 f94c 	bl	8000a5c <MX_USB_OTG_FS_PCD_Init>
  MX_SPI3_Init();
 80007c4:	f000 f8dc 	bl	8000980 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  NRF24_Init();
 80007c8:	f7ff ff68 	bl	800069c <NRF24_Init>

  NRF24_TxMode(TxAddress, 10);
 80007cc:	210a      	movs	r1, #10
 80007ce:	4809      	ldr	r0, [pc, #36]	; (80007f4 <main+0x4c>)
 80007d0:	f7ff ff88 	bl	80006e4 <NRF24_TxMode>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(NRF24_Transmit(TxData) == 1)
 80007d4:	4808      	ldr	r0, [pc, #32]	; (80007f8 <main+0x50>)
 80007d6:	f7ff ffab 	bl	8000730 <NRF24_Transmit>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d103      	bne.n	80007e8 <main+0x40>
	  {
		  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80007e0:	2101      	movs	r1, #1
 80007e2:	4806      	ldr	r0, [pc, #24]	; (80007fc <main+0x54>)
 80007e4:	f001 fad5 	bl	8001d92 <HAL_GPIO_TogglePin>
	  }

	  HAL_Delay(1000);
 80007e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007ec:	f000 fcdc 	bl	80011a8 <HAL_Delay>
	  if(NRF24_Transmit(TxData) == 1)
 80007f0:	e7f0      	b.n	80007d4 <main+0x2c>
 80007f2:	bf00      	nop
 80007f4:	20000000 	.word	0x20000000
 80007f8:	20000004 	.word	0x20000004
 80007fc:	40020400 	.word	0x40020400

08000800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b094      	sub	sp, #80	; 0x50
 8000804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	2234      	movs	r2, #52	; 0x34
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f004 fc5e 	bl	80050d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000814:	f107 0308 	add.w	r3, r7, #8
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000824:	f001 fc18 	bl	8002058 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000828:	4b2c      	ldr	r3, [pc, #176]	; (80008dc <SystemClock_Config+0xdc>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	4a2b      	ldr	r2, [pc, #172]	; (80008dc <SystemClock_Config+0xdc>)
 800082e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000832:	6413      	str	r3, [r2, #64]	; 0x40
 8000834:	4b29      	ldr	r3, [pc, #164]	; (80008dc <SystemClock_Config+0xdc>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000840:	4b27      	ldr	r3, [pc, #156]	; (80008e0 <SystemClock_Config+0xe0>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000848:	4a25      	ldr	r2, [pc, #148]	; (80008e0 <SystemClock_Config+0xe0>)
 800084a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800084e:	6013      	str	r3, [r2, #0]
 8000850:	4b23      	ldr	r3, [pc, #140]	; (80008e0 <SystemClock_Config+0xe0>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800085c:	2301      	movs	r3, #1
 800085e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000860:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000864:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000866:	2302      	movs	r3, #2
 8000868:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800086a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800086e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000870:	2304      	movs	r3, #4
 8000872:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000874:	2360      	movs	r3, #96	; 0x60
 8000876:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000878:	2302      	movs	r3, #2
 800087a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800087c:	2304      	movs	r3, #4
 800087e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000880:	2302      	movs	r3, #2
 8000882:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000884:	f107 031c 	add.w	r3, r7, #28
 8000888:	4618      	mov	r0, r3
 800088a:	f001 fc45 	bl	8002118 <HAL_RCC_OscConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000894:	f000 f9c6 	bl	8000c24 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000898:	f001 fbee 	bl	8002078 <HAL_PWREx_EnableOverDrive>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80008a2:	f000 f9bf 	bl	8000c24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a6:	230f      	movs	r3, #15
 80008a8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008aa:	2302      	movs	r3, #2
 80008ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008bc:	f107 0308 	add.w	r3, r7, #8
 80008c0:	2103      	movs	r1, #3
 80008c2:	4618      	mov	r0, r3
 80008c4:	f001 fed6 	bl	8002674 <HAL_RCC_ClockConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80008ce:	f000 f9a9 	bl	8000c24 <Error_Handler>
  }
}
 80008d2:	bf00      	nop
 80008d4:	3750      	adds	r7, #80	; 0x50
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40007000 	.word	0x40007000

080008e4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008e8:	4b1f      	ldr	r3, [pc, #124]	; (8000968 <MX_ETH_Init+0x84>)
 80008ea:	4a20      	ldr	r2, [pc, #128]	; (800096c <MX_ETH_Init+0x88>)
 80008ec:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008ee:	4b20      	ldr	r3, [pc, #128]	; (8000970 <MX_ETH_Init+0x8c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008f4:	4b1e      	ldr	r3, [pc, #120]	; (8000970 <MX_ETH_Init+0x8c>)
 80008f6:	2280      	movs	r2, #128	; 0x80
 80008f8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008fa:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <MX_ETH_Init+0x8c>)
 80008fc:	22e1      	movs	r2, #225	; 0xe1
 80008fe:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000900:	4b1b      	ldr	r3, [pc, #108]	; (8000970 <MX_ETH_Init+0x8c>)
 8000902:	2200      	movs	r2, #0
 8000904:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000906:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <MX_ETH_Init+0x8c>)
 8000908:	2200      	movs	r2, #0
 800090a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800090c:	4b18      	ldr	r3, [pc, #96]	; (8000970 <MX_ETH_Init+0x8c>)
 800090e:	2200      	movs	r2, #0
 8000910:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000912:	4b15      	ldr	r3, [pc, #84]	; (8000968 <MX_ETH_Init+0x84>)
 8000914:	4a16      	ldr	r2, [pc, #88]	; (8000970 <MX_ETH_Init+0x8c>)
 8000916:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000918:	4b13      	ldr	r3, [pc, #76]	; (8000968 <MX_ETH_Init+0x84>)
 800091a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800091e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_ETH_Init+0x84>)
 8000922:	4a14      	ldr	r2, [pc, #80]	; (8000974 <MX_ETH_Init+0x90>)
 8000924:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000926:	4b10      	ldr	r3, [pc, #64]	; (8000968 <MX_ETH_Init+0x84>)
 8000928:	4a13      	ldr	r2, [pc, #76]	; (8000978 <MX_ETH_Init+0x94>)
 800092a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800092c:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_ETH_Init+0x84>)
 800092e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000932:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000934:	480c      	ldr	r0, [pc, #48]	; (8000968 <MX_ETH_Init+0x84>)
 8000936:	f000 fd41 	bl	80013bc <HAL_ETH_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000940:	f000 f970 	bl	8000c24 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000944:	2238      	movs	r2, #56	; 0x38
 8000946:	2100      	movs	r1, #0
 8000948:	480c      	ldr	r0, [pc, #48]	; (800097c <MX_ETH_Init+0x98>)
 800094a:	f004 fbc1 	bl	80050d0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <MX_ETH_Init+0x98>)
 8000950:	2221      	movs	r2, #33	; 0x21
 8000952:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000954:	4b09      	ldr	r3, [pc, #36]	; (800097c <MX_ETH_Init+0x98>)
 8000956:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800095a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800095c:	4b07      	ldr	r3, [pc, #28]	; (800097c <MX_ETH_Init+0x98>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	200001b4 	.word	0x200001b4
 800096c:	40028000 	.word	0x40028000
 8000970:	20000858 	.word	0x20000858
 8000974:	200000c0 	.word	0x200000c0
 8000978:	20000020 	.word	0x20000020
 800097c:	2000017c 	.word	0x2000017c

08000980 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000984:	4b1b      	ldr	r3, [pc, #108]	; (80009f4 <MX_SPI3_Init+0x74>)
 8000986:	4a1c      	ldr	r2, [pc, #112]	; (80009f8 <MX_SPI3_Init+0x78>)
 8000988:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800098a:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <MX_SPI3_Init+0x74>)
 800098c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000990:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000992:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <MX_SPI3_Init+0x74>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000998:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <MX_SPI3_Init+0x74>)
 800099a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800099e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009a0:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <MX_SPI3_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009a6:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <MX_SPI3_Init+0x74>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80009ac:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_SPI3_Init+0x74>)
 80009ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009b2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <MX_SPI3_Init+0x74>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <MX_SPI3_Init+0x74>)
 80009bc:	2200      	movs	r2, #0
 80009be:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MX_SPI3_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <MX_SPI3_Init+0x74>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80009cc:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_SPI3_Init+0x74>)
 80009ce:	2207      	movs	r2, #7
 80009d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <MX_SPI3_Init+0x74>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <MX_SPI3_Init+0x74>)
 80009da:	2208      	movs	r2, #8
 80009dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_SPI3_Init+0x74>)
 80009e0:	f002 fc96 	bl	8003310 <HAL_SPI_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80009ea:	f000 f91b 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000264 	.word	0x20000264
 80009f8:	40003c00 	.word	0x40003c00

080009fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a00:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <MX_USART3_UART_Init+0x58>)
 8000a02:	4a15      	ldr	r2, [pc, #84]	; (8000a58 <MX_USART3_UART_Init+0x5c>)
 8000a04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a06:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <MX_USART3_UART_Init+0x58>)
 8000a08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_USART3_UART_Init+0x58>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <MX_USART3_UART_Init+0x58>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <MX_USART3_UART_Init+0x58>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <MX_USART3_UART_Init+0x58>)
 8000a22:	220c      	movs	r2, #12
 8000a24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <MX_USART3_UART_Init+0x58>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a2c:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <MX_USART3_UART_Init+0x58>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <MX_USART3_UART_Init+0x58>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <MX_USART3_UART_Init+0x58>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_USART3_UART_Init+0x58>)
 8000a40:	f003 fbc6 	bl	80041d0 <HAL_UART_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a4a:	f000 f8eb 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200002c8 	.word	0x200002c8
 8000a58:	40004800 	.word	0x40004800

08000a5c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a60:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a62:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a66:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a6a:	2206      	movs	r2, #6
 8000a6c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a6e:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a70:	2202      	movs	r2, #2
 8000a72:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a7c:	2202      	movs	r2, #2
 8000a7e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a8c:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a9e:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa0:	f001 f991 	bl	8001dc6 <HAL_PCD_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000aaa:	f000 f8bb 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000350 	.word	0x20000350

08000ab8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08c      	sub	sp, #48	; 0x30
 8000abc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
 8000acc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ace:	4b51      	ldr	r3, [pc, #324]	; (8000c14 <MX_GPIO_Init+0x15c>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a50      	ldr	r2, [pc, #320]	; (8000c14 <MX_GPIO_Init+0x15c>)
 8000ad4:	f043 0304 	orr.w	r3, r3, #4
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b4e      	ldr	r3, [pc, #312]	; (8000c14 <MX_GPIO_Init+0x15c>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0304 	and.w	r3, r3, #4
 8000ae2:	61bb      	str	r3, [r7, #24]
 8000ae4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ae6:	4b4b      	ldr	r3, [pc, #300]	; (8000c14 <MX_GPIO_Init+0x15c>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a4a      	ldr	r2, [pc, #296]	; (8000c14 <MX_GPIO_Init+0x15c>)
 8000aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b48      	ldr	r3, [pc, #288]	; (8000c14 <MX_GPIO_Init+0x15c>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	4b45      	ldr	r3, [pc, #276]	; (8000c14 <MX_GPIO_Init+0x15c>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a44      	ldr	r2, [pc, #272]	; (8000c14 <MX_GPIO_Init+0x15c>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b42      	ldr	r3, [pc, #264]	; (8000c14 <MX_GPIO_Init+0x15c>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b16:	4b3f      	ldr	r3, [pc, #252]	; (8000c14 <MX_GPIO_Init+0x15c>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a3e      	ldr	r2, [pc, #248]	; (8000c14 <MX_GPIO_Init+0x15c>)
 8000b1c:	f043 0302 	orr.w	r3, r3, #2
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b3c      	ldr	r3, [pc, #240]	; (8000c14 <MX_GPIO_Init+0x15c>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0302 	and.w	r3, r3, #2
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b2e:	4b39      	ldr	r3, [pc, #228]	; (8000c14 <MX_GPIO_Init+0x15c>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a38      	ldr	r2, [pc, #224]	; (8000c14 <MX_GPIO_Init+0x15c>)
 8000b34:	f043 0308 	orr.w	r3, r3, #8
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b36      	ldr	r3, [pc, #216]	; (8000c14 <MX_GPIO_Init+0x15c>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0308 	and.w	r3, r3, #8
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b46:	4b33      	ldr	r3, [pc, #204]	; (8000c14 <MX_GPIO_Init+0x15c>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a32      	ldr	r2, [pc, #200]	; (8000c14 <MX_GPIO_Init+0x15c>)
 8000b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b30      	ldr	r3, [pc, #192]	; (8000c14 <MX_GPIO_Init+0x15c>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b64:	482c      	ldr	r0, [pc, #176]	; (8000c18 <MX_GPIO_Init+0x160>)
 8000b66:	f001 f8fb 	bl	8001d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2140      	movs	r1, #64	; 0x40
 8000b6e:	482b      	ldr	r0, [pc, #172]	; (8000c1c <MX_GPIO_Init+0x164>)
 8000b70:	f001 f8f6 	bl	8001d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000b7a:	4829      	ldr	r0, [pc, #164]	; (8000c20 <MX_GPIO_Init+0x168>)
 8000b7c:	f001 f8f0 	bl	8001d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b86:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 031c 	add.w	r3, r7, #28
 8000b94:	4619      	mov	r1, r3
 8000b96:	4822      	ldr	r0, [pc, #136]	; (8000c20 <MX_GPIO_Init+0x168>)
 8000b98:	f000 ff36 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b9c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4818      	ldr	r0, [pc, #96]	; (8000c18 <MX_GPIO_Init+0x160>)
 8000bb6:	f000 ff27 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bba:	2340      	movs	r3, #64	; 0x40
 8000bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bca:	f107 031c 	add.w	r3, r7, #28
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4812      	ldr	r0, [pc, #72]	; (8000c1c <MX_GPIO_Init+0x164>)
 8000bd2:	f000 ff19 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bd6:	2380      	movs	r3, #128	; 0x80
 8000bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000be2:	f107 031c 	add.w	r3, r7, #28
 8000be6:	4619      	mov	r1, r3
 8000be8:	480c      	ldr	r0, [pc, #48]	; (8000c1c <MX_GPIO_Init+0x164>)
 8000bea:	f000 ff0d 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c00:	f107 031c 	add.w	r3, r7, #28
 8000c04:	4619      	mov	r1, r3
 8000c06:	4806      	ldr	r0, [pc, #24]	; (8000c20 <MX_GPIO_Init+0x168>)
 8000c08:	f000 fefe 	bl	8001a08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c0c:	bf00      	nop
 8000c0e:	3730      	adds	r7, #48	; 0x30
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40020400 	.word	0x40020400
 8000c1c:	40021800 	.word	0x40021800
 8000c20:	40020800 	.word	0x40020800

08000c24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c28:	b672      	cpsid	i
}
 8000c2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <Error_Handler+0x8>
	...

08000c30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c36:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <HAL_MspInit+0x44>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	4a0e      	ldr	r2, [pc, #56]	; (8000c74 <HAL_MspInit+0x44>)
 8000c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c40:	6413      	str	r3, [r2, #64]	; 0x40
 8000c42:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <HAL_MspInit+0x44>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <HAL_MspInit+0x44>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c52:	4a08      	ldr	r2, [pc, #32]	; (8000c74 <HAL_MspInit+0x44>)
 8000c54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c58:	6453      	str	r3, [r2, #68]	; 0x44
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_MspInit+0x44>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	40023800 	.word	0x40023800

08000c78 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08e      	sub	sp, #56	; 0x38
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a4e      	ldr	r2, [pc, #312]	; (8000dd0 <HAL_ETH_MspInit+0x158>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	f040 8096 	bne.w	8000dc8 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000c9c:	4b4d      	ldr	r3, [pc, #308]	; (8000dd4 <HAL_ETH_MspInit+0x15c>)
 8000c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca0:	4a4c      	ldr	r2, [pc, #304]	; (8000dd4 <HAL_ETH_MspInit+0x15c>)
 8000ca2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ca6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca8:	4b4a      	ldr	r3, [pc, #296]	; (8000dd4 <HAL_ETH_MspInit+0x15c>)
 8000caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cb0:	623b      	str	r3, [r7, #32]
 8000cb2:	6a3b      	ldr	r3, [r7, #32]
 8000cb4:	4b47      	ldr	r3, [pc, #284]	; (8000dd4 <HAL_ETH_MspInit+0x15c>)
 8000cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb8:	4a46      	ldr	r2, [pc, #280]	; (8000dd4 <HAL_ETH_MspInit+0x15c>)
 8000cba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000cbe:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc0:	4b44      	ldr	r3, [pc, #272]	; (8000dd4 <HAL_ETH_MspInit+0x15c>)
 8000cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000cc8:	61fb      	str	r3, [r7, #28]
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	4b41      	ldr	r3, [pc, #260]	; (8000dd4 <HAL_ETH_MspInit+0x15c>)
 8000cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd0:	4a40      	ldr	r2, [pc, #256]	; (8000dd4 <HAL_ETH_MspInit+0x15c>)
 8000cd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000cd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd8:	4b3e      	ldr	r3, [pc, #248]	; (8000dd4 <HAL_ETH_MspInit+0x15c>)
 8000cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ce0:	61bb      	str	r3, [r7, #24]
 8000ce2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce4:	4b3b      	ldr	r3, [pc, #236]	; (8000dd4 <HAL_ETH_MspInit+0x15c>)
 8000ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce8:	4a3a      	ldr	r2, [pc, #232]	; (8000dd4 <HAL_ETH_MspInit+0x15c>)
 8000cea:	f043 0304 	orr.w	r3, r3, #4
 8000cee:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf0:	4b38      	ldr	r3, [pc, #224]	; (8000dd4 <HAL_ETH_MspInit+0x15c>)
 8000cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf4:	f003 0304 	and.w	r3, r3, #4
 8000cf8:	617b      	str	r3, [r7, #20]
 8000cfa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfc:	4b35      	ldr	r3, [pc, #212]	; (8000dd4 <HAL_ETH_MspInit+0x15c>)
 8000cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d00:	4a34      	ldr	r2, [pc, #208]	; (8000dd4 <HAL_ETH_MspInit+0x15c>)
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	6313      	str	r3, [r2, #48]	; 0x30
 8000d08:	4b32      	ldr	r3, [pc, #200]	; (8000dd4 <HAL_ETH_MspInit+0x15c>)
 8000d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0c:	f003 0301 	and.w	r3, r3, #1
 8000d10:	613b      	str	r3, [r7, #16]
 8000d12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d14:	4b2f      	ldr	r3, [pc, #188]	; (8000dd4 <HAL_ETH_MspInit+0x15c>)
 8000d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d18:	4a2e      	ldr	r2, [pc, #184]	; (8000dd4 <HAL_ETH_MspInit+0x15c>)
 8000d1a:	f043 0302 	orr.w	r3, r3, #2
 8000d1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d20:	4b2c      	ldr	r3, [pc, #176]	; (8000dd4 <HAL_ETH_MspInit+0x15c>)
 8000d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d24:	f003 0302 	and.w	r3, r3, #2
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d2c:	4b29      	ldr	r3, [pc, #164]	; (8000dd4 <HAL_ETH_MspInit+0x15c>)
 8000d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d30:	4a28      	ldr	r2, [pc, #160]	; (8000dd4 <HAL_ETH_MspInit+0x15c>)
 8000d32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d36:	6313      	str	r3, [r2, #48]	; 0x30
 8000d38:	4b26      	ldr	r3, [pc, #152]	; (8000dd4 <HAL_ETH_MspInit+0x15c>)
 8000d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d44:	2332      	movs	r3, #50	; 0x32
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d50:	2303      	movs	r3, #3
 8000d52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d54:	230b      	movs	r3, #11
 8000d56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	481e      	ldr	r0, [pc, #120]	; (8000dd8 <HAL_ETH_MspInit+0x160>)
 8000d60:	f000 fe52 	bl	8001a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d64:	2386      	movs	r3, #134	; 0x86
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d70:	2303      	movs	r3, #3
 8000d72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d74:	230b      	movs	r3, #11
 8000d76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4817      	ldr	r0, [pc, #92]	; (8000ddc <HAL_ETH_MspInit+0x164>)
 8000d80:	f000 fe42 	bl	8001a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d92:	2303      	movs	r3, #3
 8000d94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d96:	230b      	movs	r3, #11
 8000d98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9e:	4619      	mov	r1, r3
 8000da0:	480f      	ldr	r0, [pc, #60]	; (8000de0 <HAL_ETH_MspInit+0x168>)
 8000da2:	f000 fe31 	bl	8001a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000da6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db4:	2303      	movs	r3, #3
 8000db6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000db8:	230b      	movs	r3, #11
 8000dba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4808      	ldr	r0, [pc, #32]	; (8000de4 <HAL_ETH_MspInit+0x16c>)
 8000dc4:	f000 fe20 	bl	8001a08 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000dc8:	bf00      	nop
 8000dca:	3738      	adds	r7, #56	; 0x38
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40028000 	.word	0x40028000
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40020800 	.word	0x40020800
 8000ddc:	40020000 	.word	0x40020000
 8000de0:	40020400 	.word	0x40020400
 8000de4:	40021800 	.word	0x40021800

08000de8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	; 0x28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a17      	ldr	r2, [pc, #92]	; (8000e64 <HAL_SPI_MspInit+0x7c>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d128      	bne.n	8000e5c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e0a:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <HAL_SPI_MspInit+0x80>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	4a16      	ldr	r2, [pc, #88]	; (8000e68 <HAL_SPI_MspInit+0x80>)
 8000e10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e14:	6413      	str	r3, [r2, #64]	; 0x40
 8000e16:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <HAL_SPI_MspInit+0x80>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e22:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <HAL_SPI_MspInit+0x80>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a10      	ldr	r2, [pc, #64]	; (8000e68 <HAL_SPI_MspInit+0x80>)
 8000e28:	f043 0304 	orr.w	r3, r3, #4
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <HAL_SPI_MspInit+0x80>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0304 	and.w	r3, r3, #4
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000e3a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e4c:	2306      	movs	r3, #6
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	4619      	mov	r1, r3
 8000e56:	4805      	ldr	r0, [pc, #20]	; (8000e6c <HAL_SPI_MspInit+0x84>)
 8000e58:	f000 fdd6 	bl	8001a08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e5c:	bf00      	nop
 8000e5e:	3728      	adds	r7, #40	; 0x28
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40003c00 	.word	0x40003c00
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	40020800 	.word	0x40020800

08000e70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b0ae      	sub	sp, #184	; 0xb8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	2290      	movs	r2, #144	; 0x90
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4618      	mov	r0, r3
 8000e92:	f004 f91d 	bl	80050d0 <memset>
  if(huart->Instance==USART3)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a22      	ldr	r2, [pc, #136]	; (8000f24 <HAL_UART_MspInit+0xb4>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d13c      	bne.n	8000f1a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ea0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ea4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f001 fe06 	bl	8002ac0 <HAL_RCCEx_PeriphCLKConfig>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000eba:	f7ff feb3 	bl	8000c24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <HAL_UART_MspInit+0xb8>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	4a19      	ldr	r2, [pc, #100]	; (8000f28 <HAL_UART_MspInit+0xb8>)
 8000ec4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eca:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <HAL_UART_MspInit+0xb8>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ed6:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <HAL_UART_MspInit+0xb8>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a13      	ldr	r2, [pc, #76]	; (8000f28 <HAL_UART_MspInit+0xb8>)
 8000edc:	f043 0308 	orr.w	r3, r3, #8
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <HAL_UART_MspInit+0xb8>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0308 	and.w	r3, r3, #8
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000eee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ef2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f02:	2303      	movs	r3, #3
 8000f04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f08:	2307      	movs	r3, #7
 8000f0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f0e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f12:	4619      	mov	r1, r3
 8000f14:	4805      	ldr	r0, [pc, #20]	; (8000f2c <HAL_UART_MspInit+0xbc>)
 8000f16:	f000 fd77 	bl	8001a08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f1a:	bf00      	nop
 8000f1c:	37b8      	adds	r7, #184	; 0xb8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40004800 	.word	0x40004800
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40020c00 	.word	0x40020c00

08000f30 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b0ae      	sub	sp, #184	; 0xb8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	2290      	movs	r2, #144	; 0x90
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4618      	mov	r0, r3
 8000f52:	f004 f8bd 	bl	80050d0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f5e:	d159      	bne.n	8001014 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000f60:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f64:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	4618      	mov	r0, r3
 8000f72:	f001 fda5 	bl	8002ac0 <HAL_RCCEx_PeriphCLKConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000f7c:	f7ff fe52 	bl	8000c24 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f80:	4b26      	ldr	r3, [pc, #152]	; (800101c <HAL_PCD_MspInit+0xec>)
 8000f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f84:	4a25      	ldr	r2, [pc, #148]	; (800101c <HAL_PCD_MspInit+0xec>)
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8c:	4b23      	ldr	r3, [pc, #140]	; (800101c <HAL_PCD_MspInit+0xec>)
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	613b      	str	r3, [r7, #16]
 8000f96:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f98:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000f9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fac:	2303      	movs	r3, #3
 8000fae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fb2:	230a      	movs	r3, #10
 8000fb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4818      	ldr	r0, [pc, #96]	; (8001020 <HAL_PCD_MspInit+0xf0>)
 8000fc0:	f000 fd22 	bl	8001a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000fc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fc8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000fd8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4810      	ldr	r0, [pc, #64]	; (8001020 <HAL_PCD_MspInit+0xf0>)
 8000fe0:	f000 fd12 	bl	8001a08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000fe4:	4b0d      	ldr	r3, [pc, #52]	; (800101c <HAL_PCD_MspInit+0xec>)
 8000fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fe8:	4a0c      	ldr	r2, [pc, #48]	; (800101c <HAL_PCD_MspInit+0xec>)
 8000fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fee:	6353      	str	r3, [r2, #52]	; 0x34
 8000ff0:	4b0a      	ldr	r3, [pc, #40]	; (800101c <HAL_PCD_MspInit+0xec>)
 8000ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <HAL_PCD_MspInit+0xec>)
 8000ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001000:	4a06      	ldr	r2, [pc, #24]	; (800101c <HAL_PCD_MspInit+0xec>)
 8001002:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001006:	6453      	str	r3, [r2, #68]	; 0x44
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <HAL_PCD_MspInit+0xec>)
 800100a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001014:	bf00      	nop
 8001016:	37b8      	adds	r7, #184	; 0xb8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40023800 	.word	0x40023800
 8001020:	40020000 	.word	0x40020000

08001024 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001028:	e7fe      	b.n	8001028 <NMI_Handler+0x4>

0800102a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800102e:	e7fe      	b.n	800102e <HardFault_Handler+0x4>

08001030 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001034:	e7fe      	b.n	8001034 <MemManage_Handler+0x4>

08001036 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800103a:	e7fe      	b.n	800103a <BusFault_Handler+0x4>

0800103c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001040:	e7fe      	b.n	8001040 <UsageFault_Handler+0x4>

08001042 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001070:	f000 f87a 	bl	8001168 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}

08001078 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <SystemInit+0x20>)
 800107e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001082:	4a05      	ldr	r2, [pc, #20]	; (8001098 <SystemInit+0x20>)
 8001084:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001088:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800109c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010a0:	480d      	ldr	r0, [pc, #52]	; (80010d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010a2:	490e      	ldr	r1, [pc, #56]	; (80010dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010a4:	4a0e      	ldr	r2, [pc, #56]	; (80010e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a8:	e002      	b.n	80010b0 <LoopCopyDataInit>

080010aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ae:	3304      	adds	r3, #4

080010b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b4:	d3f9      	bcc.n	80010aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b6:	4a0b      	ldr	r2, [pc, #44]	; (80010e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010b8:	4c0b      	ldr	r4, [pc, #44]	; (80010e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010bc:	e001      	b.n	80010c2 <LoopFillZerobss>

080010be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c0:	3204      	adds	r2, #4

080010c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c4:	d3fb      	bcc.n	80010be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010c6:	f7ff ffd7 	bl	8001078 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ca:	f003 ffdd 	bl	8005088 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ce:	f7ff fb6b 	bl	80007a8 <main>
  bx  lr    
 80010d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010d4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80010d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010dc:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80010e0:	08005120 	.word	0x08005120
  ldr r2, =_sbss
 80010e4:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 80010e8:	20000864 	.word	0x20000864

080010ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010ec:	e7fe      	b.n	80010ec <ADC_IRQHandler>

080010ee <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f2:	2003      	movs	r0, #3
 80010f4:	f000 f92e 	bl	8001354 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010f8:	2000      	movs	r0, #0
 80010fa:	f000 f805 	bl	8001108 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010fe:	f7ff fd97 	bl	8000c30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001102:	2300      	movs	r3, #0
}
 8001104:	4618      	mov	r0, r3
 8001106:	bd80      	pop	{r7, pc}

08001108 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <HAL_InitTick+0x54>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <HAL_InitTick+0x58>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	4619      	mov	r1, r3
 800111a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001122:	fbb2 f3f3 	udiv	r3, r2, r3
 8001126:	4618      	mov	r0, r3
 8001128:	f000 f93b 	bl	80013a2 <HAL_SYSTICK_Config>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e00e      	b.n	8001154 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2b0f      	cmp	r3, #15
 800113a:	d80a      	bhi.n	8001152 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800113c:	2200      	movs	r2, #0
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	f04f 30ff 	mov.w	r0, #4294967295
 8001144:	f000 f911 	bl	800136a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001148:	4a06      	ldr	r2, [pc, #24]	; (8001164 <HAL_InitTick+0x5c>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800114e:	2300      	movs	r3, #0
 8001150:	e000      	b.n	8001154 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
}
 8001154:	4618      	mov	r0, r3
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000014 	.word	0x20000014
 8001160:	2000001c 	.word	0x2000001c
 8001164:	20000018 	.word	0x20000018

08001168 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_IncTick+0x20>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	461a      	mov	r2, r3
 8001172:	4b06      	ldr	r3, [pc, #24]	; (800118c <HAL_IncTick+0x24>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4413      	add	r3, r2
 8001178:	4a04      	ldr	r2, [pc, #16]	; (800118c <HAL_IncTick+0x24>)
 800117a:	6013      	str	r3, [r2, #0]
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	2000001c 	.word	0x2000001c
 800118c:	20000860 	.word	0x20000860

08001190 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return uwTick;
 8001194:	4b03      	ldr	r3, [pc, #12]	; (80011a4 <HAL_GetTick+0x14>)
 8001196:	681b      	ldr	r3, [r3, #0]
}
 8001198:	4618      	mov	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	20000860 	.word	0x20000860

080011a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b0:	f7ff ffee 	bl	8001190 <HAL_GetTick>
 80011b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c0:	d005      	beq.n	80011ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011c2:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <HAL_Delay+0x44>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	461a      	mov	r2, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4413      	add	r3, r2
 80011cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ce:	bf00      	nop
 80011d0:	f7ff ffde 	bl	8001190 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d8f7      	bhi.n	80011d0 <HAL_Delay+0x28>
  {
  }
}
 80011e0:	bf00      	nop
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	2000001c 	.word	0x2000001c

080011f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001200:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <__NVIC_SetPriorityGrouping+0x40>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800120c:	4013      	ands	r3, r2
 800120e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <__NVIC_SetPriorityGrouping+0x44>)
 800121a:	4313      	orrs	r3, r2
 800121c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800121e:	4a04      	ldr	r2, [pc, #16]	; (8001230 <__NVIC_SetPriorityGrouping+0x40>)
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	60d3      	str	r3, [r2, #12]
}
 8001224:	bf00      	nop
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000ed00 	.word	0xe000ed00
 8001234:	05fa0000 	.word	0x05fa0000

08001238 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800123c:	4b04      	ldr	r3, [pc, #16]	; (8001250 <__NVIC_GetPriorityGrouping+0x18>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	0a1b      	lsrs	r3, r3, #8
 8001242:	f003 0307 	and.w	r3, r3, #7
}
 8001246:	4618      	mov	r0, r3
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	6039      	str	r1, [r7, #0]
 800125e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001264:	2b00      	cmp	r3, #0
 8001266:	db0a      	blt.n	800127e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	b2da      	uxtb	r2, r3
 800126c:	490c      	ldr	r1, [pc, #48]	; (80012a0 <__NVIC_SetPriority+0x4c>)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	0112      	lsls	r2, r2, #4
 8001274:	b2d2      	uxtb	r2, r2
 8001276:	440b      	add	r3, r1
 8001278:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800127c:	e00a      	b.n	8001294 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	b2da      	uxtb	r2, r3
 8001282:	4908      	ldr	r1, [pc, #32]	; (80012a4 <__NVIC_SetPriority+0x50>)
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	f003 030f 	and.w	r3, r3, #15
 800128a:	3b04      	subs	r3, #4
 800128c:	0112      	lsls	r2, r2, #4
 800128e:	b2d2      	uxtb	r2, r2
 8001290:	440b      	add	r3, r1
 8001292:	761a      	strb	r2, [r3, #24]
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	e000e100 	.word	0xe000e100
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b089      	sub	sp, #36	; 0x24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	f1c3 0307 	rsb	r3, r3, #7
 80012c2:	2b04      	cmp	r3, #4
 80012c4:	bf28      	it	cs
 80012c6:	2304      	movcs	r3, #4
 80012c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3304      	adds	r3, #4
 80012ce:	2b06      	cmp	r3, #6
 80012d0:	d902      	bls.n	80012d8 <NVIC_EncodePriority+0x30>
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3b03      	subs	r3, #3
 80012d6:	e000      	b.n	80012da <NVIC_EncodePriority+0x32>
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012dc:	f04f 32ff 	mov.w	r2, #4294967295
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43da      	mvns	r2, r3
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	401a      	ands	r2, r3
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f0:	f04f 31ff 	mov.w	r1, #4294967295
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	fa01 f303 	lsl.w	r3, r1, r3
 80012fa:	43d9      	mvns	r1, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001300:	4313      	orrs	r3, r2
         );
}
 8001302:	4618      	mov	r0, r3
 8001304:	3724      	adds	r7, #36	; 0x24
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
	...

08001310 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3b01      	subs	r3, #1
 800131c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001320:	d301      	bcc.n	8001326 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001322:	2301      	movs	r3, #1
 8001324:	e00f      	b.n	8001346 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001326:	4a0a      	ldr	r2, [pc, #40]	; (8001350 <SysTick_Config+0x40>)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3b01      	subs	r3, #1
 800132c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800132e:	210f      	movs	r1, #15
 8001330:	f04f 30ff 	mov.w	r0, #4294967295
 8001334:	f7ff ff8e 	bl	8001254 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001338:	4b05      	ldr	r3, [pc, #20]	; (8001350 <SysTick_Config+0x40>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800133e:	4b04      	ldr	r3, [pc, #16]	; (8001350 <SysTick_Config+0x40>)
 8001340:	2207      	movs	r2, #7
 8001342:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	e000e010 	.word	0xe000e010

08001354 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff ff47 	bl	80011f0 <__NVIC_SetPriorityGrouping>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800136a:	b580      	push	{r7, lr}
 800136c:	b086      	sub	sp, #24
 800136e:	af00      	add	r7, sp, #0
 8001370:	4603      	mov	r3, r0
 8001372:	60b9      	str	r1, [r7, #8]
 8001374:	607a      	str	r2, [r7, #4]
 8001376:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800137c:	f7ff ff5c 	bl	8001238 <__NVIC_GetPriorityGrouping>
 8001380:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	68b9      	ldr	r1, [r7, #8]
 8001386:	6978      	ldr	r0, [r7, #20]
 8001388:	f7ff ff8e 	bl	80012a8 <NVIC_EncodePriority>
 800138c:	4602      	mov	r2, r0
 800138e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001392:	4611      	mov	r1, r2
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ff5d 	bl	8001254 <__NVIC_SetPriority>
}
 800139a:	bf00      	nop
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff ffb0 	bl	8001310 <SysTick_Config>
 80013b0:	4603      	mov	r3, r0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
	...

080013bc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e06a      	b.n	80014a4 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d106      	bne.n	80013e6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2223      	movs	r2, #35	; 0x23
 80013dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff fc49 	bl	8000c78 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e6:	4b31      	ldr	r3, [pc, #196]	; (80014ac <HAL_ETH_Init+0xf0>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	4a30      	ldr	r2, [pc, #192]	; (80014ac <HAL_ETH_Init+0xf0>)
 80013ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f0:	6453      	str	r3, [r2, #68]	; 0x44
 80013f2:	4b2e      	ldr	r3, [pc, #184]	; (80014ac <HAL_ETH_Init+0xf0>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80013fe:	4b2c      	ldr	r3, [pc, #176]	; (80014b0 <HAL_ETH_Init+0xf4>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	4a2b      	ldr	r2, [pc, #172]	; (80014b0 <HAL_ETH_Init+0xf4>)
 8001404:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001408:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800140a:	4b29      	ldr	r3, [pc, #164]	; (80014b0 <HAL_ETH_Init+0xf4>)
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	4927      	ldr	r1, [pc, #156]	; (80014b0 <HAL_ETH_Init+0xf4>)
 8001414:	4313      	orrs	r3, r2
 8001416:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001418:	4b25      	ldr	r3, [pc, #148]	; (80014b0 <HAL_ETH_Init+0xf4>)
 800141a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	6812      	ldr	r2, [r2, #0]
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001432:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001434:	f7ff feac 	bl	8001190 <HAL_GetTick>
 8001438:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800143a:	e011      	b.n	8001460 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800143c:	f7ff fea8 	bl	8001190 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800144a:	d909      	bls.n	8001460 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2204      	movs	r2, #4
 8001450:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	22e0      	movs	r2, #224	; 0xe0
 8001458:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e021      	b.n	80014a4 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1e4      	bne.n	800143c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f000 f958 	bl	8001728 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f000 f9ff 	bl	800187c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f000 fa55 	bl	800192e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	461a      	mov	r2, r3
 800148a:	2100      	movs	r1, #0
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f000 f9bd 	bl	800180c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2210      	movs	r2, #16
 800149e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40013800 	.word	0x40013800

080014b4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	4b51      	ldr	r3, [pc, #324]	; (8001610 <ETH_SetMACConfig+0x15c>)
 80014ca:	4013      	ands	r3, r2
 80014cc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	7c1b      	ldrb	r3, [r3, #16]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d102      	bne.n	80014dc <ETH_SetMACConfig+0x28>
 80014d6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80014da:	e000      	b.n	80014de <ETH_SetMACConfig+0x2a>
 80014dc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	7c5b      	ldrb	r3, [r3, #17]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d102      	bne.n	80014ec <ETH_SetMACConfig+0x38>
 80014e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014ea:	e000      	b.n	80014ee <ETH_SetMACConfig+0x3a>
 80014ec:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014ee:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80014f4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	7fdb      	ldrb	r3, [r3, #31]
 80014fa:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80014fc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001502:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	7f92      	ldrb	r2, [r2, #30]
 8001508:	2a00      	cmp	r2, #0
 800150a:	d102      	bne.n	8001512 <ETH_SetMACConfig+0x5e>
 800150c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001510:	e000      	b.n	8001514 <ETH_SetMACConfig+0x60>
 8001512:	2200      	movs	r2, #0
                        macconf->Speed |
 8001514:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	7f1b      	ldrb	r3, [r3, #28]
 800151a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800151c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001522:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	791b      	ldrb	r3, [r3, #4]
 8001528:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800152a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001532:	2a00      	cmp	r2, #0
 8001534:	d102      	bne.n	800153c <ETH_SetMACConfig+0x88>
 8001536:	f44f 7200 	mov.w	r2, #512	; 0x200
 800153a:	e000      	b.n	800153e <ETH_SetMACConfig+0x8a>
 800153c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800153e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	7bdb      	ldrb	r3, [r3, #15]
 8001544:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001546:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800154c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001554:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001556:	4313      	orrs	r3, r2
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	4313      	orrs	r3, r2
 800155c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800156e:	2001      	movs	r0, #1
 8001570:	f7ff fe1a 	bl	80011a8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001584:	68fa      	ldr	r2, [r7, #12]
 8001586:	f64f 7341 	movw	r3, #65345	; 0xff41
 800158a:	4013      	ands	r3, r2
 800158c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001592:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800159a:	2a00      	cmp	r2, #0
 800159c:	d101      	bne.n	80015a2 <ETH_SetMACConfig+0xee>
 800159e:	2280      	movs	r2, #128	; 0x80
 80015a0:	e000      	b.n	80015a4 <ETH_SetMACConfig+0xf0>
 80015a2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015a4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80015aa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80015b2:	2a01      	cmp	r2, #1
 80015b4:	d101      	bne.n	80015ba <ETH_SetMACConfig+0x106>
 80015b6:	2208      	movs	r2, #8
 80015b8:	e000      	b.n	80015bc <ETH_SetMACConfig+0x108>
 80015ba:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80015bc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80015c4:	2a01      	cmp	r2, #1
 80015c6:	d101      	bne.n	80015cc <ETH_SetMACConfig+0x118>
 80015c8:	2204      	movs	r2, #4
 80015ca:	e000      	b.n	80015ce <ETH_SetMACConfig+0x11a>
 80015cc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80015ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80015d6:	2a01      	cmp	r2, #1
 80015d8:	d101      	bne.n	80015de <ETH_SetMACConfig+0x12a>
 80015da:	2202      	movs	r2, #2
 80015dc:	e000      	b.n	80015e0 <ETH_SetMACConfig+0x12c>
 80015de:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015e0:	4313      	orrs	r3, r2
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	68fa      	ldr	r2, [r7, #12]
 80015ee:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015f8:	2001      	movs	r0, #1
 80015fa:	f7ff fdd5 	bl	80011a8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	619a      	str	r2, [r3, #24]
}
 8001606:	bf00      	nop
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	ff20810f 	.word	0xff20810f

08001614 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	4b3d      	ldr	r3, [pc, #244]	; (8001724 <ETH_SetDMAConfig+0x110>)
 800162e:	4013      	ands	r3, r2
 8001630:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	7b1b      	ldrb	r3, [r3, #12]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d102      	bne.n	8001640 <ETH_SetDMAConfig+0x2c>
 800163a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800163e:	e000      	b.n	8001642 <ETH_SetDMAConfig+0x2e>
 8001640:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	7b5b      	ldrb	r3, [r3, #13]
 8001646:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001648:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	7f52      	ldrb	r2, [r2, #29]
 800164e:	2a00      	cmp	r2, #0
 8001650:	d102      	bne.n	8001658 <ETH_SetDMAConfig+0x44>
 8001652:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001656:	e000      	b.n	800165a <ETH_SetDMAConfig+0x46>
 8001658:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800165a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	7b9b      	ldrb	r3, [r3, #14]
 8001660:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001662:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001668:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	7f1b      	ldrb	r3, [r3, #28]
 800166e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001670:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	7f9b      	ldrb	r3, [r3, #30]
 8001676:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001678:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800167e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001686:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001688:	4313      	orrs	r3, r2
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	4313      	orrs	r3, r2
 800168e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001698:	461a      	mov	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016aa:	2001      	movs	r0, #1
 80016ac:	f7ff fd7c 	bl	80011a8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016b8:	461a      	mov	r2, r3
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	791b      	ldrb	r3, [r3, #4]
 80016c2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016c8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80016ce:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80016d4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016dc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80016de:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80016e6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80016ec:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	6812      	ldr	r2, [r2, #0]
 80016f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016fa:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001708:	2001      	movs	r0, #1
 800170a:	f7ff fd4d 	bl	80011a8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001716:	461a      	mov	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6013      	str	r3, [r2, #0]
}
 800171c:	bf00      	nop
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	f8de3f23 	.word	0xf8de3f23

08001728 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b0a6      	sub	sp, #152	; 0x98
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001730:	2301      	movs	r3, #1
 8001732:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001736:	2301      	movs	r3, #1
 8001738:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800173c:	2300      	movs	r3, #0
 800173e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001740:	2300      	movs	r3, #0
 8001742:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001746:	2301      	movs	r3, #1
 8001748:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800174c:	2300      	movs	r3, #0
 800174e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001752:	2301      	movs	r3, #1
 8001754:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001758:	2300      	movs	r3, #0
 800175a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800175e:	2300      	movs	r3, #0
 8001760:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001764:	2300      	movs	r3, #0
 8001766:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001768:	2300      	movs	r3, #0
 800176a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800176e:	2300      	movs	r3, #0
 8001770:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001778:	2300      	movs	r3, #0
 800177a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800177e:	2300      	movs	r3, #0
 8001780:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001784:	2300      	movs	r3, #0
 8001786:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800178a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800178e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001790:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001794:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001796:	2300      	movs	r3, #0
 8001798:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800179c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017a0:	4619      	mov	r1, r3
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff fe86 	bl	80014b4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80017a8:	2301      	movs	r3, #1
 80017aa:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80017ac:	2301      	movs	r3, #1
 80017ae:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80017b0:	2301      	movs	r3, #1
 80017b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80017b6:	2301      	movs	r3, #1
 80017b8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80017be:	2300      	movs	r3, #0
 80017c0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80017c4:	2300      	movs	r3, #0
 80017c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80017ca:	2300      	movs	r3, #0
 80017cc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80017ce:	2301      	movs	r3, #1
 80017d0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80017d4:	2301      	movs	r3, #1
 80017d6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80017d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017dc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80017de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017e2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80017e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017e8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80017ea:	2301      	movs	r3, #1
 80017ec:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80017f0:	2300      	movs	r3, #0
 80017f2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80017f4:	2300      	movs	r3, #0
 80017f6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80017f8:	f107 0308 	add.w	r3, r7, #8
 80017fc:	4619      	mov	r1, r3
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff ff08 	bl	8001614 <ETH_SetDMAConfig>
}
 8001804:	bf00      	nop
 8001806:	3798      	adds	r7, #152	; 0x98
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800180c:	b480      	push	{r7}
 800180e:	b087      	sub	sp, #28
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3305      	adds	r3, #5
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	021b      	lsls	r3, r3, #8
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	3204      	adds	r2, #4
 8001824:	7812      	ldrb	r2, [r2, #0]
 8001826:	4313      	orrs	r3, r2
 8001828:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	4b11      	ldr	r3, [pc, #68]	; (8001874 <ETH_MACAddressConfig+0x68>)
 800182e:	4413      	add	r3, r2
 8001830:	461a      	mov	r2, r3
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3303      	adds	r3, #3
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	061a      	lsls	r2, r3, #24
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	3302      	adds	r3, #2
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	041b      	lsls	r3, r3, #16
 8001846:	431a      	orrs	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3301      	adds	r3, #1
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	021b      	lsls	r3, r3, #8
 8001850:	4313      	orrs	r3, r2
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	7812      	ldrb	r2, [r2, #0]
 8001856:	4313      	orrs	r3, r2
 8001858:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800185a:	68ba      	ldr	r2, [r7, #8]
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <ETH_MACAddressConfig+0x6c>)
 800185e:	4413      	add	r3, r2
 8001860:	461a      	mov	r2, r3
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	6013      	str	r3, [r2, #0]
}
 8001866:	bf00      	nop
 8001868:	371c      	adds	r7, #28
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	40028040 	.word	0x40028040
 8001878:	40028044 	.word	0x40028044

0800187c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	e03e      	b.n	8001908 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68d9      	ldr	r1, [r3, #12]
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	4613      	mov	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	440b      	add	r3, r1
 800189a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	2200      	movs	r2, #0
 80018a6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	2200      	movs	r2, #0
 80018b2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80018b4:	68b9      	ldr	r1, [r7, #8]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	3206      	adds	r2, #6
 80018bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d80c      	bhi.n	80018ec <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	68d9      	ldr	r1, [r3, #12]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	1c5a      	adds	r2, r3, #1
 80018da:	4613      	mov	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	440b      	add	r3, r1
 80018e4:	461a      	mov	r2, r3
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	e004      	b.n	80018f6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	461a      	mov	r2, r3
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	3301      	adds	r3, #1
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2b03      	cmp	r3, #3
 800190c:	d9bd      	bls.n	800188a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68da      	ldr	r2, [r3, #12]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001920:	611a      	str	r2, [r3, #16]
}
 8001922:	bf00      	nop
 8001924:	3714      	adds	r7, #20
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800192e:	b480      	push	{r7}
 8001930:	b085      	sub	sp, #20
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	e046      	b.n	80019ca <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6919      	ldr	r1, [r3, #16]
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	4613      	mov	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	440b      	add	r3, r1
 800194c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	2200      	movs	r2, #0
 8001958:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	2200      	movs	r2, #0
 8001964:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	2200      	movs	r2, #0
 800196a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	2200      	movs	r2, #0
 8001970:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001978:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001980:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800198e:	68b9      	ldr	r1, [r7, #8]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	3212      	adds	r2, #18
 8001996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2b02      	cmp	r3, #2
 800199e:	d80c      	bhi.n	80019ba <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6919      	ldr	r1, [r3, #16]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	1c5a      	adds	r2, r3, #1
 80019a8:	4613      	mov	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	440b      	add	r3, r1
 80019b2:	461a      	mov	r2, r3
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	60da      	str	r2, [r3, #12]
 80019b8:	e004      	b.n	80019c4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	461a      	mov	r2, r3
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	3301      	adds	r3, #1
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2b03      	cmp	r3, #3
 80019ce:	d9b5      	bls.n	800193c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	691a      	ldr	r2, [r3, #16]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019fa:	60da      	str	r2, [r3, #12]
}
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b089      	sub	sp, #36	; 0x24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a16:	2300      	movs	r3, #0
 8001a18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a22:	2300      	movs	r3, #0
 8001a24:	61fb      	str	r3, [r7, #28]
 8001a26:	e175      	b.n	8001d14 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a28:	2201      	movs	r2, #1
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	f040 8164 	bne.w	8001d0e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d005      	beq.n	8001a5e <HAL_GPIO_Init+0x56>
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d130      	bne.n	8001ac0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	2203      	movs	r2, #3
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4013      	ands	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	68da      	ldr	r2, [r3, #12]
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a94:	2201      	movs	r2, #1
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	091b      	lsrs	r3, r3, #4
 8001aaa:	f003 0201 	and.w	r2, r3, #1
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 0303 	and.w	r3, r3, #3
 8001ac8:	2b03      	cmp	r3, #3
 8001aca:	d017      	beq.n	8001afc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	2203      	movs	r2, #3
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 0303 	and.w	r3, r3, #3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d123      	bne.n	8001b50 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	08da      	lsrs	r2, r3, #3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3208      	adds	r2, #8
 8001b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	220f      	movs	r2, #15
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	691a      	ldr	r2, [r3, #16]
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	08da      	lsrs	r2, r3, #3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	3208      	adds	r2, #8
 8001b4a:	69b9      	ldr	r1, [r7, #24]
 8001b4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4013      	ands	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 0203 	and.w	r2, r3, #3
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f000 80be 	beq.w	8001d0e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b92:	4b66      	ldr	r3, [pc, #408]	; (8001d2c <HAL_GPIO_Init+0x324>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b96:	4a65      	ldr	r2, [pc, #404]	; (8001d2c <HAL_GPIO_Init+0x324>)
 8001b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b9e:	4b63      	ldr	r3, [pc, #396]	; (8001d2c <HAL_GPIO_Init+0x324>)
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001baa:	4a61      	ldr	r2, [pc, #388]	; (8001d30 <HAL_GPIO_Init+0x328>)
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	089b      	lsrs	r3, r3, #2
 8001bb0:	3302      	adds	r3, #2
 8001bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	f003 0303 	and.w	r3, r3, #3
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	220f      	movs	r2, #15
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a58      	ldr	r2, [pc, #352]	; (8001d34 <HAL_GPIO_Init+0x32c>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d037      	beq.n	8001c46 <HAL_GPIO_Init+0x23e>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a57      	ldr	r2, [pc, #348]	; (8001d38 <HAL_GPIO_Init+0x330>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d031      	beq.n	8001c42 <HAL_GPIO_Init+0x23a>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a56      	ldr	r2, [pc, #344]	; (8001d3c <HAL_GPIO_Init+0x334>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d02b      	beq.n	8001c3e <HAL_GPIO_Init+0x236>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a55      	ldr	r2, [pc, #340]	; (8001d40 <HAL_GPIO_Init+0x338>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d025      	beq.n	8001c3a <HAL_GPIO_Init+0x232>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a54      	ldr	r2, [pc, #336]	; (8001d44 <HAL_GPIO_Init+0x33c>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d01f      	beq.n	8001c36 <HAL_GPIO_Init+0x22e>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a53      	ldr	r2, [pc, #332]	; (8001d48 <HAL_GPIO_Init+0x340>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d019      	beq.n	8001c32 <HAL_GPIO_Init+0x22a>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a52      	ldr	r2, [pc, #328]	; (8001d4c <HAL_GPIO_Init+0x344>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d013      	beq.n	8001c2e <HAL_GPIO_Init+0x226>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a51      	ldr	r2, [pc, #324]	; (8001d50 <HAL_GPIO_Init+0x348>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d00d      	beq.n	8001c2a <HAL_GPIO_Init+0x222>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a50      	ldr	r2, [pc, #320]	; (8001d54 <HAL_GPIO_Init+0x34c>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d007      	beq.n	8001c26 <HAL_GPIO_Init+0x21e>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a4f      	ldr	r2, [pc, #316]	; (8001d58 <HAL_GPIO_Init+0x350>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d101      	bne.n	8001c22 <HAL_GPIO_Init+0x21a>
 8001c1e:	2309      	movs	r3, #9
 8001c20:	e012      	b.n	8001c48 <HAL_GPIO_Init+0x240>
 8001c22:	230a      	movs	r3, #10
 8001c24:	e010      	b.n	8001c48 <HAL_GPIO_Init+0x240>
 8001c26:	2308      	movs	r3, #8
 8001c28:	e00e      	b.n	8001c48 <HAL_GPIO_Init+0x240>
 8001c2a:	2307      	movs	r3, #7
 8001c2c:	e00c      	b.n	8001c48 <HAL_GPIO_Init+0x240>
 8001c2e:	2306      	movs	r3, #6
 8001c30:	e00a      	b.n	8001c48 <HAL_GPIO_Init+0x240>
 8001c32:	2305      	movs	r3, #5
 8001c34:	e008      	b.n	8001c48 <HAL_GPIO_Init+0x240>
 8001c36:	2304      	movs	r3, #4
 8001c38:	e006      	b.n	8001c48 <HAL_GPIO_Init+0x240>
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e004      	b.n	8001c48 <HAL_GPIO_Init+0x240>
 8001c3e:	2302      	movs	r3, #2
 8001c40:	e002      	b.n	8001c48 <HAL_GPIO_Init+0x240>
 8001c42:	2301      	movs	r3, #1
 8001c44:	e000      	b.n	8001c48 <HAL_GPIO_Init+0x240>
 8001c46:	2300      	movs	r3, #0
 8001c48:	69fa      	ldr	r2, [r7, #28]
 8001c4a:	f002 0203 	and.w	r2, r2, #3
 8001c4e:	0092      	lsls	r2, r2, #2
 8001c50:	4093      	lsls	r3, r2
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c58:	4935      	ldr	r1, [pc, #212]	; (8001d30 <HAL_GPIO_Init+0x328>)
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	089b      	lsrs	r3, r3, #2
 8001c5e:	3302      	adds	r3, #2
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c66:	4b3d      	ldr	r3, [pc, #244]	; (8001d5c <HAL_GPIO_Init+0x354>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4013      	ands	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c8a:	4a34      	ldr	r2, [pc, #208]	; (8001d5c <HAL_GPIO_Init+0x354>)
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c90:	4b32      	ldr	r3, [pc, #200]	; (8001d5c <HAL_GPIO_Init+0x354>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cb4:	4a29      	ldr	r2, [pc, #164]	; (8001d5c <HAL_GPIO_Init+0x354>)
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cba:	4b28      	ldr	r3, [pc, #160]	; (8001d5c <HAL_GPIO_Init+0x354>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cde:	4a1f      	ldr	r2, [pc, #124]	; (8001d5c <HAL_GPIO_Init+0x354>)
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ce4:	4b1d      	ldr	r3, [pc, #116]	; (8001d5c <HAL_GPIO_Init+0x354>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d003      	beq.n	8001d08 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d08:	4a14      	ldr	r2, [pc, #80]	; (8001d5c <HAL_GPIO_Init+0x354>)
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3301      	adds	r3, #1
 8001d12:	61fb      	str	r3, [r7, #28]
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	2b0f      	cmp	r3, #15
 8001d18:	f67f ae86 	bls.w	8001a28 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	bf00      	nop
 8001d20:	3724      	adds	r7, #36	; 0x24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40013800 	.word	0x40013800
 8001d34:	40020000 	.word	0x40020000
 8001d38:	40020400 	.word	0x40020400
 8001d3c:	40020800 	.word	0x40020800
 8001d40:	40020c00 	.word	0x40020c00
 8001d44:	40021000 	.word	0x40021000
 8001d48:	40021400 	.word	0x40021400
 8001d4c:	40021800 	.word	0x40021800
 8001d50:	40021c00 	.word	0x40021c00
 8001d54:	40022000 	.word	0x40022000
 8001d58:	40022400 	.word	0x40022400
 8001d5c:	40013c00 	.word	0x40013c00

08001d60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	807b      	strh	r3, [r7, #2]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d70:	787b      	ldrb	r3, [r7, #1]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d76:	887a      	ldrh	r2, [r7, #2]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001d7c:	e003      	b.n	8001d86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001d7e:	887b      	ldrh	r3, [r7, #2]
 8001d80:	041a      	lsls	r2, r3, #16
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	619a      	str	r2, [r3, #24]
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b085      	sub	sp, #20
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001da4:	887a      	ldrh	r2, [r7, #2]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	4013      	ands	r3, r2
 8001daa:	041a      	lsls	r2, r3, #16
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	43d9      	mvns	r1, r3
 8001db0:	887b      	ldrh	r3, [r7, #2]
 8001db2:	400b      	ands	r3, r1
 8001db4:	431a      	orrs	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	619a      	str	r2, [r3, #24]
}
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001dc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dc8:	b08f      	sub	sp, #60	; 0x3c
 8001dca:	af0a      	add	r7, sp, #40	; 0x28
 8001dcc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d101      	bne.n	8001dd8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e116      	b.n	8002006 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d106      	bne.n	8001df8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7ff f89c 	bl	8000f30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d102      	bne.n	8001e12 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f002 fe9a 	bl	8004b50 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	603b      	str	r3, [r7, #0]
 8001e22:	687e      	ldr	r6, [r7, #4]
 8001e24:	466d      	mov	r5, sp
 8001e26:	f106 0410 	add.w	r4, r6, #16
 8001e2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e32:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e36:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e3a:	1d33      	adds	r3, r6, #4
 8001e3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e3e:	6838      	ldr	r0, [r7, #0]
 8001e40:	f002 fe2e 	bl	8004aa0 <USB_CoreInit>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d005      	beq.n	8001e56 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e0d7      	b.n	8002006 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f002 fe88 	bl	8004b72 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e62:	2300      	movs	r3, #0
 8001e64:	73fb      	strb	r3, [r7, #15]
 8001e66:	e04a      	b.n	8001efe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e68:	7bfa      	ldrb	r2, [r7, #15]
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	4413      	add	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	440b      	add	r3, r1
 8001e76:	333d      	adds	r3, #61	; 0x3d
 8001e78:	2201      	movs	r2, #1
 8001e7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e7c:	7bfa      	ldrb	r2, [r7, #15]
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	4613      	mov	r3, r2
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	4413      	add	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	440b      	add	r3, r1
 8001e8a:	333c      	adds	r3, #60	; 0x3c
 8001e8c:	7bfa      	ldrb	r2, [r7, #15]
 8001e8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e90:	7bfa      	ldrb	r2, [r7, #15]
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
 8001e94:	b298      	uxth	r0, r3
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	3344      	adds	r3, #68	; 0x44
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ea8:	7bfa      	ldrb	r2, [r7, #15]
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	4413      	add	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	3340      	adds	r3, #64	; 0x40
 8001eb8:	2200      	movs	r2, #0
 8001eba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ebc:	7bfa      	ldrb	r2, [r7, #15]
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	4413      	add	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	3348      	adds	r3, #72	; 0x48
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ed0:	7bfa      	ldrb	r2, [r7, #15]
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4413      	add	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	440b      	add	r3, r1
 8001ede:	334c      	adds	r3, #76	; 0x4c
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ee4:	7bfa      	ldrb	r2, [r7, #15]
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	4413      	add	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	3354      	adds	r3, #84	; 0x54
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ef8:	7bfb      	ldrb	r3, [r7, #15]
 8001efa:	3301      	adds	r3, #1
 8001efc:	73fb      	strb	r3, [r7, #15]
 8001efe:	7bfa      	ldrb	r2, [r7, #15]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d3af      	bcc.n	8001e68 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f08:	2300      	movs	r3, #0
 8001f0a:	73fb      	strb	r3, [r7, #15]
 8001f0c:	e044      	b.n	8001f98 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f0e:	7bfa      	ldrb	r2, [r7, #15]
 8001f10:	6879      	ldr	r1, [r7, #4]
 8001f12:	4613      	mov	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	4413      	add	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	440b      	add	r3, r1
 8001f1c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001f20:	2200      	movs	r2, #0
 8001f22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f24:	7bfa      	ldrb	r2, [r7, #15]
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001f36:	7bfa      	ldrb	r2, [r7, #15]
 8001f38:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f3a:	7bfa      	ldrb	r2, [r7, #15]
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	4413      	add	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	440b      	add	r3, r1
 8001f48:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f50:	7bfa      	ldrb	r2, [r7, #15]
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	4613      	mov	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4413      	add	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f66:	7bfa      	ldrb	r2, [r7, #15]
 8001f68:	6879      	ldr	r1, [r7, #4]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	4413      	add	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	440b      	add	r3, r1
 8001f74:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f7c:	7bfa      	ldrb	r2, [r7, #15]
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4413      	add	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	440b      	add	r3, r1
 8001f8a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f92:	7bfb      	ldrb	r3, [r7, #15]
 8001f94:	3301      	adds	r3, #1
 8001f96:	73fb      	strb	r3, [r7, #15]
 8001f98:	7bfa      	ldrb	r2, [r7, #15]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d3b5      	bcc.n	8001f0e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	603b      	str	r3, [r7, #0]
 8001fa8:	687e      	ldr	r6, [r7, #4]
 8001faa:	466d      	mov	r5, sp
 8001fac:	f106 0410 	add.w	r4, r6, #16
 8001fb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fb8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fbc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fc0:	1d33      	adds	r3, r6, #4
 8001fc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fc4:	6838      	ldr	r0, [r7, #0]
 8001fc6:	f002 fe21 	bl	8004c0c <USB_DevInit>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d005      	beq.n	8001fdc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e014      	b.n	8002006 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d102      	bne.n	8001ffa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 f80b 	bl	8002010 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f002 ffdf 	bl	8004fc2 <USB_DevDisconnect>

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002010 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800203e:	4b05      	ldr	r3, [pc, #20]	; (8002054 <HAL_PCDEx_ActivateLPM+0x44>)
 8002040:	4313      	orrs	r3, r2
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	10000003 	.word	0x10000003

08002058 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800205c:	4b05      	ldr	r3, [pc, #20]	; (8002074 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a04      	ldr	r2, [pc, #16]	; (8002074 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002066:	6013      	str	r3, [r2, #0]
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	40007000 	.word	0x40007000

08002078 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800207e:	2300      	movs	r3, #0
 8002080:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002082:	4b23      	ldr	r3, [pc, #140]	; (8002110 <HAL_PWREx_EnableOverDrive+0x98>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	4a22      	ldr	r2, [pc, #136]	; (8002110 <HAL_PWREx_EnableOverDrive+0x98>)
 8002088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800208c:	6413      	str	r3, [r2, #64]	; 0x40
 800208e:	4b20      	ldr	r3, [pc, #128]	; (8002110 <HAL_PWREx_EnableOverDrive+0x98>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002096:	603b      	str	r3, [r7, #0]
 8002098:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800209a:	4b1e      	ldr	r3, [pc, #120]	; (8002114 <HAL_PWREx_EnableOverDrive+0x9c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a1d      	ldr	r2, [pc, #116]	; (8002114 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020a6:	f7ff f873 	bl	8001190 <HAL_GetTick>
 80020aa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020ac:	e009      	b.n	80020c2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020ae:	f7ff f86f 	bl	8001190 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020bc:	d901      	bls.n	80020c2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e022      	b.n	8002108 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020c2:	4b14      	ldr	r3, [pc, #80]	; (8002114 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ce:	d1ee      	bne.n	80020ae <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80020d0:	4b10      	ldr	r3, [pc, #64]	; (8002114 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a0f      	ldr	r2, [pc, #60]	; (8002114 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020da:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020dc:	f7ff f858 	bl	8001190 <HAL_GetTick>
 80020e0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80020e2:	e009      	b.n	80020f8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020e4:	f7ff f854 	bl	8001190 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020f2:	d901      	bls.n	80020f8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e007      	b.n	8002108 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80020f8:	4b06      	ldr	r3, [pc, #24]	; (8002114 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002100:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002104:	d1ee      	bne.n	80020e4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40023800 	.word	0x40023800
 8002114:	40007000 	.word	0x40007000

08002118 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002120:	2300      	movs	r3, #0
 8002122:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e29b      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 8087 	beq.w	800224a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800213c:	4b96      	ldr	r3, [pc, #600]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f003 030c 	and.w	r3, r3, #12
 8002144:	2b04      	cmp	r3, #4
 8002146:	d00c      	beq.n	8002162 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002148:	4b93      	ldr	r3, [pc, #588]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f003 030c 	and.w	r3, r3, #12
 8002150:	2b08      	cmp	r3, #8
 8002152:	d112      	bne.n	800217a <HAL_RCC_OscConfig+0x62>
 8002154:	4b90      	ldr	r3, [pc, #576]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800215c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002160:	d10b      	bne.n	800217a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002162:	4b8d      	ldr	r3, [pc, #564]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d06c      	beq.n	8002248 <HAL_RCC_OscConfig+0x130>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d168      	bne.n	8002248 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e275      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002182:	d106      	bne.n	8002192 <HAL_RCC_OscConfig+0x7a>
 8002184:	4b84      	ldr	r3, [pc, #528]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a83      	ldr	r2, [pc, #524]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 800218a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800218e:	6013      	str	r3, [r2, #0]
 8002190:	e02e      	b.n	80021f0 <HAL_RCC_OscConfig+0xd8>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10c      	bne.n	80021b4 <HAL_RCC_OscConfig+0x9c>
 800219a:	4b7f      	ldr	r3, [pc, #508]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a7e      	ldr	r2, [pc, #504]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80021a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	4b7c      	ldr	r3, [pc, #496]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a7b      	ldr	r2, [pc, #492]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80021ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	e01d      	b.n	80021f0 <HAL_RCC_OscConfig+0xd8>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021bc:	d10c      	bne.n	80021d8 <HAL_RCC_OscConfig+0xc0>
 80021be:	4b76      	ldr	r3, [pc, #472]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a75      	ldr	r2, [pc, #468]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80021c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	4b73      	ldr	r3, [pc, #460]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a72      	ldr	r2, [pc, #456]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80021d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	e00b      	b.n	80021f0 <HAL_RCC_OscConfig+0xd8>
 80021d8:	4b6f      	ldr	r3, [pc, #444]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a6e      	ldr	r2, [pc, #440]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80021de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e2:	6013      	str	r3, [r2, #0]
 80021e4:	4b6c      	ldr	r3, [pc, #432]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a6b      	ldr	r2, [pc, #428]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80021ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d013      	beq.n	8002220 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f8:	f7fe ffca 	bl	8001190 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002200:	f7fe ffc6 	bl	8001190 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b64      	cmp	r3, #100	; 0x64
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e229      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002212:	4b61      	ldr	r3, [pc, #388]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f0      	beq.n	8002200 <HAL_RCC_OscConfig+0xe8>
 800221e:	e014      	b.n	800224a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002220:	f7fe ffb6 	bl	8001190 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002228:	f7fe ffb2 	bl	8001190 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b64      	cmp	r3, #100	; 0x64
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e215      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800223a:	4b57      	ldr	r3, [pc, #348]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f0      	bne.n	8002228 <HAL_RCC_OscConfig+0x110>
 8002246:	e000      	b.n	800224a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d069      	beq.n	800232a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002256:	4b50      	ldr	r3, [pc, #320]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 030c 	and.w	r3, r3, #12
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00b      	beq.n	800227a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002262:	4b4d      	ldr	r3, [pc, #308]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f003 030c 	and.w	r3, r3, #12
 800226a:	2b08      	cmp	r3, #8
 800226c:	d11c      	bne.n	80022a8 <HAL_RCC_OscConfig+0x190>
 800226e:	4b4a      	ldr	r3, [pc, #296]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d116      	bne.n	80022a8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800227a:	4b47      	ldr	r3, [pc, #284]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d005      	beq.n	8002292 <HAL_RCC_OscConfig+0x17a>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d001      	beq.n	8002292 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e1e9      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002292:	4b41      	ldr	r3, [pc, #260]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	493d      	ldr	r1, [pc, #244]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022a6:	e040      	b.n	800232a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d023      	beq.n	80022f8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022b0:	4b39      	ldr	r3, [pc, #228]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a38      	ldr	r2, [pc, #224]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022bc:	f7fe ff68 	bl	8001190 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c4:	f7fe ff64 	bl	8001190 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e1c7      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d6:	4b30      	ldr	r3, [pc, #192]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0f0      	beq.n	80022c4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e2:	4b2d      	ldr	r3, [pc, #180]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	4929      	ldr	r1, [pc, #164]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	600b      	str	r3, [r1, #0]
 80022f6:	e018      	b.n	800232a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022f8:	4b27      	ldr	r3, [pc, #156]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a26      	ldr	r2, [pc, #152]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80022fe:	f023 0301 	bic.w	r3, r3, #1
 8002302:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002304:	f7fe ff44 	bl	8001190 <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800230c:	f7fe ff40 	bl	8001190 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e1a3      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800231e:	4b1e      	ldr	r3, [pc, #120]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f0      	bne.n	800230c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b00      	cmp	r3, #0
 8002334:	d038      	beq.n	80023a8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d019      	beq.n	8002372 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800233e:	4b16      	ldr	r3, [pc, #88]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 8002340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002342:	4a15      	ldr	r2, [pc, #84]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234a:	f7fe ff21 	bl	8001190 <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002350:	e008      	b.n	8002364 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002352:	f7fe ff1d 	bl	8001190 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e180      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002364:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 8002366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0f0      	beq.n	8002352 <HAL_RCC_OscConfig+0x23a>
 8002370:	e01a      	b.n	80023a8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002372:	4b09      	ldr	r3, [pc, #36]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 8002374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002376:	4a08      	ldr	r2, [pc, #32]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 8002378:	f023 0301 	bic.w	r3, r3, #1
 800237c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800237e:	f7fe ff07 	bl	8001190 <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002384:	e00a      	b.n	800239c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002386:	f7fe ff03 	bl	8001190 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d903      	bls.n	800239c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e166      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>
 8002398:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800239c:	4b92      	ldr	r3, [pc, #584]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 800239e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1ee      	bne.n	8002386 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 80a4 	beq.w	80024fe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023b6:	4b8c      	ldr	r3, [pc, #560]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10d      	bne.n	80023de <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80023c2:	4b89      	ldr	r3, [pc, #548]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	4a88      	ldr	r2, [pc, #544]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 80023c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023cc:	6413      	str	r3, [r2, #64]	; 0x40
 80023ce:	4b86      	ldr	r3, [pc, #536]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d6:	60bb      	str	r3, [r7, #8]
 80023d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023da:	2301      	movs	r3, #1
 80023dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023de:	4b83      	ldr	r3, [pc, #524]	; (80025ec <HAL_RCC_OscConfig+0x4d4>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d118      	bne.n	800241c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80023ea:	4b80      	ldr	r3, [pc, #512]	; (80025ec <HAL_RCC_OscConfig+0x4d4>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a7f      	ldr	r2, [pc, #508]	; (80025ec <HAL_RCC_OscConfig+0x4d4>)
 80023f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023f6:	f7fe fecb 	bl	8001190 <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023fc:	e008      	b.n	8002410 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023fe:	f7fe fec7 	bl	8001190 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b64      	cmp	r3, #100	; 0x64
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e12a      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002410:	4b76      	ldr	r3, [pc, #472]	; (80025ec <HAL_RCC_OscConfig+0x4d4>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0f0      	beq.n	80023fe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d106      	bne.n	8002432 <HAL_RCC_OscConfig+0x31a>
 8002424:	4b70      	ldr	r3, [pc, #448]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 8002426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002428:	4a6f      	ldr	r2, [pc, #444]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 800242a:	f043 0301 	orr.w	r3, r3, #1
 800242e:	6713      	str	r3, [r2, #112]	; 0x70
 8002430:	e02d      	b.n	800248e <HAL_RCC_OscConfig+0x376>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10c      	bne.n	8002454 <HAL_RCC_OscConfig+0x33c>
 800243a:	4b6b      	ldr	r3, [pc, #428]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 800243c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243e:	4a6a      	ldr	r2, [pc, #424]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 8002440:	f023 0301 	bic.w	r3, r3, #1
 8002444:	6713      	str	r3, [r2, #112]	; 0x70
 8002446:	4b68      	ldr	r3, [pc, #416]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 8002448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244a:	4a67      	ldr	r2, [pc, #412]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 800244c:	f023 0304 	bic.w	r3, r3, #4
 8002450:	6713      	str	r3, [r2, #112]	; 0x70
 8002452:	e01c      	b.n	800248e <HAL_RCC_OscConfig+0x376>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	2b05      	cmp	r3, #5
 800245a:	d10c      	bne.n	8002476 <HAL_RCC_OscConfig+0x35e>
 800245c:	4b62      	ldr	r3, [pc, #392]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 800245e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002460:	4a61      	ldr	r2, [pc, #388]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 8002462:	f043 0304 	orr.w	r3, r3, #4
 8002466:	6713      	str	r3, [r2, #112]	; 0x70
 8002468:	4b5f      	ldr	r3, [pc, #380]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 800246a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246c:	4a5e      	ldr	r2, [pc, #376]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 800246e:	f043 0301 	orr.w	r3, r3, #1
 8002472:	6713      	str	r3, [r2, #112]	; 0x70
 8002474:	e00b      	b.n	800248e <HAL_RCC_OscConfig+0x376>
 8002476:	4b5c      	ldr	r3, [pc, #368]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 8002478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247a:	4a5b      	ldr	r2, [pc, #364]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 800247c:	f023 0301 	bic.w	r3, r3, #1
 8002480:	6713      	str	r3, [r2, #112]	; 0x70
 8002482:	4b59      	ldr	r3, [pc, #356]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 8002484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002486:	4a58      	ldr	r2, [pc, #352]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 8002488:	f023 0304 	bic.w	r3, r3, #4
 800248c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d015      	beq.n	80024c2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002496:	f7fe fe7b 	bl	8001190 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800249c:	e00a      	b.n	80024b4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249e:	f7fe fe77 	bl	8001190 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e0d8      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b4:	4b4c      	ldr	r3, [pc, #304]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 80024b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0ee      	beq.n	800249e <HAL_RCC_OscConfig+0x386>
 80024c0:	e014      	b.n	80024ec <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c2:	f7fe fe65 	bl	8001190 <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c8:	e00a      	b.n	80024e0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ca:	f7fe fe61 	bl	8001190 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d8:	4293      	cmp	r3, r2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e0c2      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e0:	4b41      	ldr	r3, [pc, #260]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 80024e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1ee      	bne.n	80024ca <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024ec:	7dfb      	ldrb	r3, [r7, #23]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d105      	bne.n	80024fe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f2:	4b3d      	ldr	r3, [pc, #244]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	4a3c      	ldr	r2, [pc, #240]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 80024f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 80ae 	beq.w	8002664 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002508:	4b37      	ldr	r3, [pc, #220]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 030c 	and.w	r3, r3, #12
 8002510:	2b08      	cmp	r3, #8
 8002512:	d06d      	beq.n	80025f0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	2b02      	cmp	r3, #2
 800251a:	d14b      	bne.n	80025b4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800251c:	4b32      	ldr	r3, [pc, #200]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a31      	ldr	r2, [pc, #196]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 8002522:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002528:	f7fe fe32 	bl	8001190 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002530:	f7fe fe2e 	bl	8001190 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e091      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002542:	4b29      	ldr	r3, [pc, #164]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1f0      	bne.n	8002530 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69da      	ldr	r2, [r3, #28]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	431a      	orrs	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255c:	019b      	lsls	r3, r3, #6
 800255e:	431a      	orrs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002564:	085b      	lsrs	r3, r3, #1
 8002566:	3b01      	subs	r3, #1
 8002568:	041b      	lsls	r3, r3, #16
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002570:	061b      	lsls	r3, r3, #24
 8002572:	431a      	orrs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002578:	071b      	lsls	r3, r3, #28
 800257a:	491b      	ldr	r1, [pc, #108]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 800257c:	4313      	orrs	r3, r2
 800257e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002580:	4b19      	ldr	r3, [pc, #100]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a18      	ldr	r2, [pc, #96]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 8002586:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800258a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258c:	f7fe fe00 	bl	8001190 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002594:	f7fe fdfc 	bl	8001190 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e05f      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a6:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0f0      	beq.n	8002594 <HAL_RCC_OscConfig+0x47c>
 80025b2:	e057      	b.n	8002664 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b4:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a0b      	ldr	r2, [pc, #44]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 80025ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c0:	f7fe fde6 	bl	8001190 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c8:	f7fe fde2 	bl	8001190 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e045      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025da:	4b03      	ldr	r3, [pc, #12]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0x4b0>
 80025e6:	e03d      	b.n	8002664 <HAL_RCC_OscConfig+0x54c>
 80025e8:	40023800 	.word	0x40023800
 80025ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80025f0:	4b1f      	ldr	r3, [pc, #124]	; (8002670 <HAL_RCC_OscConfig+0x558>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d030      	beq.n	8002660 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002608:	429a      	cmp	r2, r3
 800260a:	d129      	bne.n	8002660 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002616:	429a      	cmp	r2, r3
 8002618:	d122      	bne.n	8002660 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002620:	4013      	ands	r3, r2
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002626:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002628:	4293      	cmp	r3, r2
 800262a:	d119      	bne.n	8002660 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002636:	085b      	lsrs	r3, r3, #1
 8002638:	3b01      	subs	r3, #1
 800263a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800263c:	429a      	cmp	r2, r3
 800263e:	d10f      	bne.n	8002660 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800264c:	429a      	cmp	r2, r3
 800264e:	d107      	bne.n	8002660 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800265c:	429a      	cmp	r2, r3
 800265e:	d001      	beq.n	8002664 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e000      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40023800 	.word	0x40023800

08002674 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800267e:	2300      	movs	r3, #0
 8002680:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d101      	bne.n	800268c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e0d0      	b.n	800282e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800268c:	4b6a      	ldr	r3, [pc, #424]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 030f 	and.w	r3, r3, #15
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	429a      	cmp	r2, r3
 8002698:	d910      	bls.n	80026bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269a:	4b67      	ldr	r3, [pc, #412]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f023 020f 	bic.w	r2, r3, #15
 80026a2:	4965      	ldr	r1, [pc, #404]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026aa:	4b63      	ldr	r3, [pc, #396]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d001      	beq.n	80026bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e0b8      	b.n	800282e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d020      	beq.n	800270a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d005      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026d4:	4b59      	ldr	r3, [pc, #356]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	4a58      	ldr	r2, [pc, #352]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 80026da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0308 	and.w	r3, r3, #8
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d005      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026ec:	4b53      	ldr	r3, [pc, #332]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	4a52      	ldr	r2, [pc, #328]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 80026f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f8:	4b50      	ldr	r3, [pc, #320]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	494d      	ldr	r1, [pc, #308]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 8002706:	4313      	orrs	r3, r2
 8002708:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d040      	beq.n	8002798 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d107      	bne.n	800272e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271e:	4b47      	ldr	r3, [pc, #284]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d115      	bne.n	8002756 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e07f      	b.n	800282e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b02      	cmp	r3, #2
 8002734:	d107      	bne.n	8002746 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002736:	4b41      	ldr	r3, [pc, #260]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d109      	bne.n	8002756 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e073      	b.n	800282e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002746:	4b3d      	ldr	r3, [pc, #244]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e06b      	b.n	800282e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002756:	4b39      	ldr	r3, [pc, #228]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f023 0203 	bic.w	r2, r3, #3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	4936      	ldr	r1, [pc, #216]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 8002764:	4313      	orrs	r3, r2
 8002766:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002768:	f7fe fd12 	bl	8001190 <HAL_GetTick>
 800276c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276e:	e00a      	b.n	8002786 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002770:	f7fe fd0e 	bl	8001190 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	f241 3288 	movw	r2, #5000	; 0x1388
 800277e:	4293      	cmp	r3, r2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e053      	b.n	800282e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002786:	4b2d      	ldr	r3, [pc, #180]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 020c 	and.w	r2, r3, #12
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	429a      	cmp	r2, r3
 8002796:	d1eb      	bne.n	8002770 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002798:	4b27      	ldr	r3, [pc, #156]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 030f 	and.w	r3, r3, #15
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d210      	bcs.n	80027c8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a6:	4b24      	ldr	r3, [pc, #144]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f023 020f 	bic.w	r2, r3, #15
 80027ae:	4922      	ldr	r1, [pc, #136]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b6:	4b20      	ldr	r3, [pc, #128]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d001      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e032      	b.n	800282e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d008      	beq.n	80027e6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027d4:	4b19      	ldr	r3, [pc, #100]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	4916      	ldr	r1, [pc, #88]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d009      	beq.n	8002806 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027f2:	4b12      	ldr	r3, [pc, #72]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	490e      	ldr	r1, [pc, #56]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 8002802:	4313      	orrs	r3, r2
 8002804:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002806:	f000 f821 	bl	800284c <HAL_RCC_GetSysClockFreq>
 800280a:	4602      	mov	r2, r0
 800280c:	4b0b      	ldr	r3, [pc, #44]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	091b      	lsrs	r3, r3, #4
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	490a      	ldr	r1, [pc, #40]	; (8002840 <HAL_RCC_ClockConfig+0x1cc>)
 8002818:	5ccb      	ldrb	r3, [r1, r3]
 800281a:	fa22 f303 	lsr.w	r3, r2, r3
 800281e:	4a09      	ldr	r2, [pc, #36]	; (8002844 <HAL_RCC_ClockConfig+0x1d0>)
 8002820:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002822:	4b09      	ldr	r3, [pc, #36]	; (8002848 <HAL_RCC_ClockConfig+0x1d4>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f7fe fc6e 	bl	8001108 <HAL_InitTick>

  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40023c00 	.word	0x40023c00
 800283c:	40023800 	.word	0x40023800
 8002840:	080050f8 	.word	0x080050f8
 8002844:	20000014 	.word	0x20000014
 8002848:	20000018 	.word	0x20000018

0800284c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800284c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002850:	b094      	sub	sp, #80	; 0x50
 8002852:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002854:	2300      	movs	r3, #0
 8002856:	647b      	str	r3, [r7, #68]	; 0x44
 8002858:	2300      	movs	r3, #0
 800285a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800285c:	2300      	movs	r3, #0
 800285e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002860:	2300      	movs	r3, #0
 8002862:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002864:	4b79      	ldr	r3, [pc, #484]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 030c 	and.w	r3, r3, #12
 800286c:	2b08      	cmp	r3, #8
 800286e:	d00d      	beq.n	800288c <HAL_RCC_GetSysClockFreq+0x40>
 8002870:	2b08      	cmp	r3, #8
 8002872:	f200 80e1 	bhi.w	8002a38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002876:	2b00      	cmp	r3, #0
 8002878:	d002      	beq.n	8002880 <HAL_RCC_GetSysClockFreq+0x34>
 800287a:	2b04      	cmp	r3, #4
 800287c:	d003      	beq.n	8002886 <HAL_RCC_GetSysClockFreq+0x3a>
 800287e:	e0db      	b.n	8002a38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002880:	4b73      	ldr	r3, [pc, #460]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x204>)
 8002882:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002884:	e0db      	b.n	8002a3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002886:	4b73      	ldr	r3, [pc, #460]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x208>)
 8002888:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800288a:	e0d8      	b.n	8002a3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800288c:	4b6f      	ldr	r3, [pc, #444]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x200>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002894:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002896:	4b6d      	ldr	r3, [pc, #436]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d063      	beq.n	800296a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028a2:	4b6a      	ldr	r3, [pc, #424]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x200>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	099b      	lsrs	r3, r3, #6
 80028a8:	2200      	movs	r2, #0
 80028aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80028ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80028ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028b4:	633b      	str	r3, [r7, #48]	; 0x30
 80028b6:	2300      	movs	r3, #0
 80028b8:	637b      	str	r3, [r7, #52]	; 0x34
 80028ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80028be:	4622      	mov	r2, r4
 80028c0:	462b      	mov	r3, r5
 80028c2:	f04f 0000 	mov.w	r0, #0
 80028c6:	f04f 0100 	mov.w	r1, #0
 80028ca:	0159      	lsls	r1, r3, #5
 80028cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028d0:	0150      	lsls	r0, r2, #5
 80028d2:	4602      	mov	r2, r0
 80028d4:	460b      	mov	r3, r1
 80028d6:	4621      	mov	r1, r4
 80028d8:	1a51      	subs	r1, r2, r1
 80028da:	6139      	str	r1, [r7, #16]
 80028dc:	4629      	mov	r1, r5
 80028de:	eb63 0301 	sbc.w	r3, r3, r1
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	f04f 0200 	mov.w	r2, #0
 80028e8:	f04f 0300 	mov.w	r3, #0
 80028ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028f0:	4659      	mov	r1, fp
 80028f2:	018b      	lsls	r3, r1, #6
 80028f4:	4651      	mov	r1, sl
 80028f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028fa:	4651      	mov	r1, sl
 80028fc:	018a      	lsls	r2, r1, #6
 80028fe:	4651      	mov	r1, sl
 8002900:	ebb2 0801 	subs.w	r8, r2, r1
 8002904:	4659      	mov	r1, fp
 8002906:	eb63 0901 	sbc.w	r9, r3, r1
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	f04f 0300 	mov.w	r3, #0
 8002912:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002916:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800291a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800291e:	4690      	mov	r8, r2
 8002920:	4699      	mov	r9, r3
 8002922:	4623      	mov	r3, r4
 8002924:	eb18 0303 	adds.w	r3, r8, r3
 8002928:	60bb      	str	r3, [r7, #8]
 800292a:	462b      	mov	r3, r5
 800292c:	eb49 0303 	adc.w	r3, r9, r3
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	f04f 0300 	mov.w	r3, #0
 800293a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800293e:	4629      	mov	r1, r5
 8002940:	024b      	lsls	r3, r1, #9
 8002942:	4621      	mov	r1, r4
 8002944:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002948:	4621      	mov	r1, r4
 800294a:	024a      	lsls	r2, r1, #9
 800294c:	4610      	mov	r0, r2
 800294e:	4619      	mov	r1, r3
 8002950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002952:	2200      	movs	r2, #0
 8002954:	62bb      	str	r3, [r7, #40]	; 0x28
 8002956:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002958:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800295c:	f7fd fc6c 	bl	8000238 <__aeabi_uldivmod>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	4613      	mov	r3, r2
 8002966:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002968:	e058      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800296a:	4b38      	ldr	r3, [pc, #224]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x200>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	099b      	lsrs	r3, r3, #6
 8002970:	2200      	movs	r2, #0
 8002972:	4618      	mov	r0, r3
 8002974:	4611      	mov	r1, r2
 8002976:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800297a:	623b      	str	r3, [r7, #32]
 800297c:	2300      	movs	r3, #0
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
 8002980:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002984:	4642      	mov	r2, r8
 8002986:	464b      	mov	r3, r9
 8002988:	f04f 0000 	mov.w	r0, #0
 800298c:	f04f 0100 	mov.w	r1, #0
 8002990:	0159      	lsls	r1, r3, #5
 8002992:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002996:	0150      	lsls	r0, r2, #5
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	4641      	mov	r1, r8
 800299e:	ebb2 0a01 	subs.w	sl, r2, r1
 80029a2:	4649      	mov	r1, r9
 80029a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80029a8:	f04f 0200 	mov.w	r2, #0
 80029ac:	f04f 0300 	mov.w	r3, #0
 80029b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029bc:	ebb2 040a 	subs.w	r4, r2, sl
 80029c0:	eb63 050b 	sbc.w	r5, r3, fp
 80029c4:	f04f 0200 	mov.w	r2, #0
 80029c8:	f04f 0300 	mov.w	r3, #0
 80029cc:	00eb      	lsls	r3, r5, #3
 80029ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029d2:	00e2      	lsls	r2, r4, #3
 80029d4:	4614      	mov	r4, r2
 80029d6:	461d      	mov	r5, r3
 80029d8:	4643      	mov	r3, r8
 80029da:	18e3      	adds	r3, r4, r3
 80029dc:	603b      	str	r3, [r7, #0]
 80029de:	464b      	mov	r3, r9
 80029e0:	eb45 0303 	adc.w	r3, r5, r3
 80029e4:	607b      	str	r3, [r7, #4]
 80029e6:	f04f 0200 	mov.w	r2, #0
 80029ea:	f04f 0300 	mov.w	r3, #0
 80029ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029f2:	4629      	mov	r1, r5
 80029f4:	028b      	lsls	r3, r1, #10
 80029f6:	4621      	mov	r1, r4
 80029f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029fc:	4621      	mov	r1, r4
 80029fe:	028a      	lsls	r2, r1, #10
 8002a00:	4610      	mov	r0, r2
 8002a02:	4619      	mov	r1, r3
 8002a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a06:	2200      	movs	r2, #0
 8002a08:	61bb      	str	r3, [r7, #24]
 8002a0a:	61fa      	str	r2, [r7, #28]
 8002a0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a10:	f7fd fc12 	bl	8000238 <__aeabi_uldivmod>
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	4613      	mov	r3, r2
 8002a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002a1c:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	0c1b      	lsrs	r3, r3, #16
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	3301      	adds	r3, #1
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002a2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a36:	e002      	b.n	8002a3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a38:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a3a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3750      	adds	r7, #80	; 0x50
 8002a44:	46bd      	mov	sp, r7
 8002a46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	00f42400 	.word	0x00f42400
 8002a54:	007a1200 	.word	0x007a1200

08002a58 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a5c:	4b03      	ldr	r3, [pc, #12]	; (8002a6c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	20000014 	.word	0x20000014

08002a70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a74:	f7ff fff0 	bl	8002a58 <HAL_RCC_GetHCLKFreq>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	0a9b      	lsrs	r3, r3, #10
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	4903      	ldr	r1, [pc, #12]	; (8002a94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a86:	5ccb      	ldrb	r3, [r1, r3]
 8002a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40023800 	.word	0x40023800
 8002a94:	08005108 	.word	0x08005108

08002a98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a9c:	f7ff ffdc 	bl	8002a58 <HAL_RCC_GetHCLKFreq>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	0b5b      	lsrs	r3, r3, #13
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	4903      	ldr	r1, [pc, #12]	; (8002abc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aae:	5ccb      	ldrb	r3, [r1, r3]
 8002ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	08005108 	.word	0x08005108

08002ac0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b088      	sub	sp, #32
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002acc:	2300      	movs	r3, #0
 8002ace:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d012      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ae8:	4b69      	ldr	r3, [pc, #420]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	4a68      	ldr	r2, [pc, #416]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002af2:	6093      	str	r3, [r2, #8]
 8002af4:	4b66      	ldr	r3, [pc, #408]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002afc:	4964      	ldr	r1, [pc, #400]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d017      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b1a:	4b5d      	ldr	r3, [pc, #372]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b28:	4959      	ldr	r1, [pc, #356]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b38:	d101      	bne.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b46:	2301      	movs	r3, #1
 8002b48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d017      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b56:	4b4e      	ldr	r3, [pc, #312]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	494a      	ldr	r1, [pc, #296]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b74:	d101      	bne.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002b76:	2301      	movs	r3, #1
 8002b78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002b82:	2301      	movs	r3, #1
 8002b84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002b92:	2301      	movs	r3, #1
 8002b94:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0320 	and.w	r3, r3, #32
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f000 808b 	beq.w	8002cba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ba4:	4b3a      	ldr	r3, [pc, #232]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	4a39      	ldr	r2, [pc, #228]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bae:	6413      	str	r3, [r2, #64]	; 0x40
 8002bb0:	4b37      	ldr	r3, [pc, #220]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb8:	60bb      	str	r3, [r7, #8]
 8002bba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002bbc:	4b35      	ldr	r3, [pc, #212]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a34      	ldr	r2, [pc, #208]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bc8:	f7fe fae2 	bl	8001190 <HAL_GetTick>
 8002bcc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bd0:	f7fe fade 	bl	8001190 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b64      	cmp	r3, #100	; 0x64
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e38f      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002be2:	4b2c      	ldr	r3, [pc, #176]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0f0      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bee:	4b28      	ldr	r3, [pc, #160]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bf6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d035      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d02e      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c0c:	4b20      	ldr	r3, [pc, #128]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c14:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c16:	4b1e      	ldr	r3, [pc, #120]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1a:	4a1d      	ldr	r2, [pc, #116]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c20:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c22:	4b1b      	ldr	r3, [pc, #108]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c26:	4a1a      	ldr	r2, [pc, #104]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c2c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c2e:	4a18      	ldr	r2, [pc, #96]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c34:	4b16      	ldr	r3, [pc, #88]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d114      	bne.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c40:	f7fe faa6 	bl	8001190 <HAL_GetTick>
 8002c44:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c46:	e00a      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c48:	f7fe faa2 	bl	8001190 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e351      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c5e:	4b0c      	ldr	r3, [pc, #48]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0ee      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c76:	d111      	bne.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002c78:	4b05      	ldr	r3, [pc, #20]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c84:	4b04      	ldr	r3, [pc, #16]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c86:	400b      	ands	r3, r1
 8002c88:	4901      	ldr	r1, [pc, #4]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	608b      	str	r3, [r1, #8]
 8002c8e:	e00b      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002c90:	40023800 	.word	0x40023800
 8002c94:	40007000 	.word	0x40007000
 8002c98:	0ffffcff 	.word	0x0ffffcff
 8002c9c:	4bac      	ldr	r3, [pc, #688]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	4aab      	ldr	r2, [pc, #684]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ca2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002ca6:	6093      	str	r3, [r2, #8]
 8002ca8:	4ba9      	ldr	r3, [pc, #676]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002caa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cb4:	49a6      	ldr	r1, [pc, #664]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0310 	and.w	r3, r3, #16
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d010      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002cc6:	4ba2      	ldr	r3, [pc, #648]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ccc:	4aa0      	ldr	r2, [pc, #640]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cd2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002cd6:	4b9e      	ldr	r3, [pc, #632]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cd8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce0:	499b      	ldr	r1, [pc, #620]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00a      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cf4:	4b96      	ldr	r3, [pc, #600]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d02:	4993      	ldr	r1, [pc, #588]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00a      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d16:	4b8e      	ldr	r3, [pc, #568]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d24:	498a      	ldr	r1, [pc, #552]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00a      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d38:	4b85      	ldr	r3, [pc, #532]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d46:	4982      	ldr	r1, [pc, #520]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00a      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d5a:	4b7d      	ldr	r3, [pc, #500]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d68:	4979      	ldr	r1, [pc, #484]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00a      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d7c:	4b74      	ldr	r3, [pc, #464]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d82:	f023 0203 	bic.w	r2, r3, #3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8a:	4971      	ldr	r1, [pc, #452]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00a      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d9e:	4b6c      	ldr	r3, [pc, #432]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da4:	f023 020c 	bic.w	r2, r3, #12
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dac:	4968      	ldr	r1, [pc, #416]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00a      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dc0:	4b63      	ldr	r3, [pc, #396]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dce:	4960      	ldr	r1, [pc, #384]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00a      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002de2:	4b5b      	ldr	r3, [pc, #364]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002df0:	4957      	ldr	r1, [pc, #348]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00a      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e04:	4b52      	ldr	r3, [pc, #328]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e12:	494f      	ldr	r1, [pc, #316]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00a      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e26:	4b4a      	ldr	r3, [pc, #296]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e34:	4946      	ldr	r1, [pc, #280]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00a      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e48:	4b41      	ldr	r3, [pc, #260]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e56:	493e      	ldr	r1, [pc, #248]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00a      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e6a:	4b39      	ldr	r3, [pc, #228]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e70:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e78:	4935      	ldr	r1, [pc, #212]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00a      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e8c:	4b30      	ldr	r3, [pc, #192]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e92:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e9a:	492d      	ldr	r1, [pc, #180]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d011      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002eae:	4b28      	ldr	r3, [pc, #160]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ebc:	4924      	ldr	r1, [pc, #144]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ec8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ecc:	d101      	bne.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0308 	and.w	r3, r3, #8
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00a      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002eee:	4b18      	ldr	r3, [pc, #96]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002efc:	4914      	ldr	r1, [pc, #80]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00b      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f10:	4b0f      	ldr	r3, [pc, #60]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f16:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f20:	490b      	ldr	r1, [pc, #44]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00f      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002f34:	4b06      	ldr	r3, [pc, #24]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f44:	4902      	ldr	r1, [pc, #8]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f4c:	e002      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002f4e:	bf00      	nop
 8002f50:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00b      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f60:	4b8a      	ldr	r3, [pc, #552]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f66:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f70:	4986      	ldr	r1, [pc, #536]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00b      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002f84:	4b81      	ldr	r3, [pc, #516]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f8a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f94:	497d      	ldr	r1, [pc, #500]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d006      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 80d6 	beq.w	800315c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002fb0:	4b76      	ldr	r3, [pc, #472]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a75      	ldr	r2, [pc, #468]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fb6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002fba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fbc:	f7fe f8e8 	bl	8001190 <HAL_GetTick>
 8002fc0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fc4:	f7fe f8e4 	bl	8001190 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b64      	cmp	r3, #100	; 0x64
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e195      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fd6:	4b6d      	ldr	r3, [pc, #436]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1f0      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d021      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d11d      	bne.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ff6:	4b65      	ldr	r3, [pc, #404]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ffc:	0c1b      	lsrs	r3, r3, #16
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003004:	4b61      	ldr	r3, [pc, #388]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003006:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800300a:	0e1b      	lsrs	r3, r3, #24
 800300c:	f003 030f 	and.w	r3, r3, #15
 8003010:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	019a      	lsls	r2, r3, #6
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	041b      	lsls	r3, r3, #16
 800301c:	431a      	orrs	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	061b      	lsls	r3, r3, #24
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	071b      	lsls	r3, r3, #28
 800302a:	4958      	ldr	r1, [pc, #352]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800302c:	4313      	orrs	r3, r2
 800302e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d004      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003042:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003046:	d00a      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003050:	2b00      	cmp	r3, #0
 8003052:	d02e      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003058:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800305c:	d129      	bne.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800305e:	4b4b      	ldr	r3, [pc, #300]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003064:	0c1b      	lsrs	r3, r3, #16
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800306c:	4b47      	ldr	r3, [pc, #284]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800306e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003072:	0f1b      	lsrs	r3, r3, #28
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	019a      	lsls	r2, r3, #6
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	041b      	lsls	r3, r3, #16
 8003084:	431a      	orrs	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	061b      	lsls	r3, r3, #24
 800308c:	431a      	orrs	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	071b      	lsls	r3, r3, #28
 8003092:	493e      	ldr	r1, [pc, #248]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003094:	4313      	orrs	r3, r2
 8003096:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800309a:	4b3c      	ldr	r3, [pc, #240]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800309c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030a0:	f023 021f 	bic.w	r2, r3, #31
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	3b01      	subs	r3, #1
 80030aa:	4938      	ldr	r1, [pc, #224]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d01d      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80030be:	4b33      	ldr	r3, [pc, #204]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030c4:	0e1b      	lsrs	r3, r3, #24
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030cc:	4b2f      	ldr	r3, [pc, #188]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030d2:	0f1b      	lsrs	r3, r3, #28
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	019a      	lsls	r2, r3, #6
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	041b      	lsls	r3, r3, #16
 80030e6:	431a      	orrs	r2, r3
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	061b      	lsls	r3, r3, #24
 80030ec:	431a      	orrs	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	071b      	lsls	r3, r3, #28
 80030f2:	4926      	ldr	r1, [pc, #152]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d011      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	019a      	lsls	r2, r3, #6
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	041b      	lsls	r3, r3, #16
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	061b      	lsls	r3, r3, #24
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	071b      	lsls	r3, r3, #28
 8003122:	491a      	ldr	r1, [pc, #104]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003124:	4313      	orrs	r3, r2
 8003126:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800312a:	4b18      	ldr	r3, [pc, #96]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a17      	ldr	r2, [pc, #92]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003130:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003134:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003136:	f7fe f82b 	bl	8001190 <HAL_GetTick>
 800313a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800313c:	e008      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800313e:	f7fe f827 	bl	8001190 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b64      	cmp	r3, #100	; 0x64
 800314a:	d901      	bls.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e0d8      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003150:	4b0e      	ldr	r3, [pc, #56]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0f0      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	2b01      	cmp	r3, #1
 8003160:	f040 80ce 	bne.w	8003300 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003164:	4b09      	ldr	r3, [pc, #36]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a08      	ldr	r2, [pc, #32]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800316a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800316e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003170:	f7fe f80e 	bl	8001190 <HAL_GetTick>
 8003174:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003176:	e00b      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003178:	f7fe f80a 	bl	8001190 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b64      	cmp	r3, #100	; 0x64
 8003184:	d904      	bls.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e0bb      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800318a:	bf00      	nop
 800318c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003190:	4b5e      	ldr	r3, [pc, #376]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003198:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800319c:	d0ec      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d009      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d02e      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d12a      	bne.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80031c6:	4b51      	ldr	r3, [pc, #324]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031cc:	0c1b      	lsrs	r3, r3, #16
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031d4:	4b4d      	ldr	r3, [pc, #308]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031da:	0f1b      	lsrs	r3, r3, #28
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	019a      	lsls	r2, r3, #6
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	041b      	lsls	r3, r3, #16
 80031ec:	431a      	orrs	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	061b      	lsls	r3, r3, #24
 80031f4:	431a      	orrs	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	071b      	lsls	r3, r3, #28
 80031fa:	4944      	ldr	r1, [pc, #272]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003202:	4b42      	ldr	r3, [pc, #264]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003204:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003208:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003210:	3b01      	subs	r3, #1
 8003212:	021b      	lsls	r3, r3, #8
 8003214:	493d      	ldr	r1, [pc, #244]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003216:	4313      	orrs	r3, r2
 8003218:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d022      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800322c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003230:	d11d      	bne.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003232:	4b36      	ldr	r3, [pc, #216]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003238:	0e1b      	lsrs	r3, r3, #24
 800323a:	f003 030f 	and.w	r3, r3, #15
 800323e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003240:	4b32      	ldr	r3, [pc, #200]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003246:	0f1b      	lsrs	r3, r3, #28
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	019a      	lsls	r2, r3, #6
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	041b      	lsls	r3, r3, #16
 800325a:	431a      	orrs	r2, r3
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	061b      	lsls	r3, r3, #24
 8003260:	431a      	orrs	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	071b      	lsls	r3, r3, #28
 8003266:	4929      	ldr	r1, [pc, #164]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003268:	4313      	orrs	r3, r2
 800326a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0308 	and.w	r3, r3, #8
 8003276:	2b00      	cmp	r3, #0
 8003278:	d028      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800327a:	4b24      	ldr	r3, [pc, #144]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800327c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003280:	0e1b      	lsrs	r3, r3, #24
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003288:	4b20      	ldr	r3, [pc, #128]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800328a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328e:	0c1b      	lsrs	r3, r3, #16
 8003290:	f003 0303 	and.w	r3, r3, #3
 8003294:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	019a      	lsls	r2, r3, #6
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	041b      	lsls	r3, r3, #16
 80032a0:	431a      	orrs	r2, r3
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	061b      	lsls	r3, r3, #24
 80032a6:	431a      	orrs	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	071b      	lsls	r3, r3, #28
 80032ae:	4917      	ldr	r1, [pc, #92]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80032b6:	4b15      	ldr	r3, [pc, #84]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c4:	4911      	ldr	r1, [pc, #68]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80032cc:	4b0f      	ldr	r3, [pc, #60]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a0e      	ldr	r2, [pc, #56]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032d8:	f7fd ff5a 	bl	8001190 <HAL_GetTick>
 80032dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032de:	e008      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032e0:	f7fd ff56 	bl	8001190 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b64      	cmp	r3, #100	; 0x64
 80032ec:	d901      	bls.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e007      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032f2:	4b06      	ldr	r3, [pc, #24]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032fe:	d1ef      	bne.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3720      	adds	r7, #32
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	40023800 	.word	0x40023800

08003310 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e09d      	b.n	800345e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	2b00      	cmp	r3, #0
 8003328:	d108      	bne.n	800333c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003332:	d009      	beq.n	8003348 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	61da      	str	r2, [r3, #28]
 800333a:	e005      	b.n	8003348 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d106      	bne.n	8003368 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7fd fd40 	bl	8000de8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2202      	movs	r2, #2
 800336c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800337e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003388:	d902      	bls.n	8003390 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800338a:	2300      	movs	r3, #0
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	e002      	b.n	8003396 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003394:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800339e:	d007      	beq.n	80033b0 <HAL_SPI_Init+0xa0>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80033a8:	d002      	beq.n	80033b0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80033c0:	431a      	orrs	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	431a      	orrs	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	431a      	orrs	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033de:	431a      	orrs	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	69db      	ldr	r3, [r3, #28]
 80033e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033e8:	431a      	orrs	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f2:	ea42 0103 	orr.w	r1, r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	0c1b      	lsrs	r3, r3, #16
 800340c:	f003 0204 	and.w	r2, r3, #4
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	f003 0310 	and.w	r3, r3, #16
 8003418:	431a      	orrs	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800341e:	f003 0308 	and.w	r3, r3, #8
 8003422:	431a      	orrs	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800342c:	ea42 0103 	orr.w	r1, r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	69da      	ldr	r2, [r3, #28]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800344c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b088      	sub	sp, #32
 800346a:	af00      	add	r7, sp, #0
 800346c:	60f8      	str	r0, [r7, #12]
 800346e:	60b9      	str	r1, [r7, #8]
 8003470:	603b      	str	r3, [r7, #0]
 8003472:	4613      	mov	r3, r2
 8003474:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003476:	2300      	movs	r3, #0
 8003478:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003480:	2b01      	cmp	r3, #1
 8003482:	d101      	bne.n	8003488 <HAL_SPI_Transmit+0x22>
 8003484:	2302      	movs	r3, #2
 8003486:	e158      	b.n	800373a <HAL_SPI_Transmit+0x2d4>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003490:	f7fd fe7e 	bl	8001190 <HAL_GetTick>
 8003494:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003496:	88fb      	ldrh	r3, [r7, #6]
 8003498:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d002      	beq.n	80034ac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80034a6:	2302      	movs	r3, #2
 80034a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034aa:	e13d      	b.n	8003728 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d002      	beq.n	80034b8 <HAL_SPI_Transmit+0x52>
 80034b2:	88fb      	ldrh	r3, [r7, #6]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d102      	bne.n	80034be <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034bc:	e134      	b.n	8003728 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2203      	movs	r2, #3
 80034c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	88fa      	ldrh	r2, [r7, #6]
 80034d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	88fa      	ldrh	r2, [r7, #6]
 80034dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003508:	d10f      	bne.n	800352a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003518:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003528:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003534:	2b40      	cmp	r3, #64	; 0x40
 8003536:	d007      	beq.n	8003548 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003546:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003550:	d94b      	bls.n	80035ea <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d002      	beq.n	8003560 <HAL_SPI_Transmit+0xfa>
 800355a:	8afb      	ldrh	r3, [r7, #22]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d13e      	bne.n	80035de <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003564:	881a      	ldrh	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003570:	1c9a      	adds	r2, r3, #2
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800357a:	b29b      	uxth	r3, r3
 800357c:	3b01      	subs	r3, #1
 800357e:	b29a      	uxth	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003584:	e02b      	b.n	80035de <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b02      	cmp	r3, #2
 8003592:	d112      	bne.n	80035ba <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003598:	881a      	ldrh	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a4:	1c9a      	adds	r2, r3, #2
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035b8:	e011      	b.n	80035de <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035ba:	f7fd fde9 	bl	8001190 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d803      	bhi.n	80035d2 <HAL_SPI_Transmit+0x16c>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d0:	d102      	bne.n	80035d8 <HAL_SPI_Transmit+0x172>
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d102      	bne.n	80035de <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80035dc:	e0a4      	b.n	8003728 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1ce      	bne.n	8003586 <HAL_SPI_Transmit+0x120>
 80035e8:	e07c      	b.n	80036e4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d002      	beq.n	80035f8 <HAL_SPI_Transmit+0x192>
 80035f2:	8afb      	ldrh	r3, [r7, #22]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d170      	bne.n	80036da <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d912      	bls.n	8003628 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003606:	881a      	ldrh	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003612:	1c9a      	adds	r2, r3, #2
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800361c:	b29b      	uxth	r3, r3
 800361e:	3b02      	subs	r3, #2
 8003620:	b29a      	uxth	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003626:	e058      	b.n	80036da <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	330c      	adds	r3, #12
 8003632:	7812      	ldrb	r2, [r2, #0]
 8003634:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363a:	1c5a      	adds	r2, r3, #1
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003644:	b29b      	uxth	r3, r3
 8003646:	3b01      	subs	r3, #1
 8003648:	b29a      	uxth	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800364e:	e044      	b.n	80036da <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b02      	cmp	r3, #2
 800365c:	d12b      	bne.n	80036b6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003662:	b29b      	uxth	r3, r3
 8003664:	2b01      	cmp	r3, #1
 8003666:	d912      	bls.n	800368e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366c:	881a      	ldrh	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003678:	1c9a      	adds	r2, r3, #2
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003682:	b29b      	uxth	r3, r3
 8003684:	3b02      	subs	r3, #2
 8003686:	b29a      	uxth	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800368c:	e025      	b.n	80036da <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	330c      	adds	r3, #12
 8003698:	7812      	ldrb	r2, [r2, #0]
 800369a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a0:	1c5a      	adds	r2, r3, #1
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	3b01      	subs	r3, #1
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036b4:	e011      	b.n	80036da <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036b6:	f7fd fd6b 	bl	8001190 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d803      	bhi.n	80036ce <HAL_SPI_Transmit+0x268>
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036cc:	d102      	bne.n	80036d4 <HAL_SPI_Transmit+0x26e>
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d102      	bne.n	80036da <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036d8:	e026      	b.n	8003728 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036de:	b29b      	uxth	r3, r3
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1b5      	bne.n	8003650 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	6839      	ldr	r1, [r7, #0]
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f000 fd07 	bl	80040fc <SPI_EndRxTxTransaction>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d002      	beq.n	80036fa <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2220      	movs	r2, #32
 80036f8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10a      	bne.n	8003718 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003702:	2300      	movs	r3, #0
 8003704:	613b      	str	r3, [r7, #16]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	613b      	str	r3, [r7, #16]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	613b      	str	r3, [r7, #16]
 8003716:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800371c:	2b00      	cmp	r3, #0
 800371e:	d002      	beq.n	8003726 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	77fb      	strb	r3, [r7, #31]
 8003724:	e000      	b.n	8003728 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003726:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003738:	7ffb      	ldrb	r3, [r7, #31]
}
 800373a:	4618      	mov	r0, r3
 800373c:	3720      	adds	r7, #32
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b088      	sub	sp, #32
 8003746:	af02      	add	r7, sp, #8
 8003748:	60f8      	str	r0, [r7, #12]
 800374a:	60b9      	str	r1, [r7, #8]
 800374c:	603b      	str	r3, [r7, #0]
 800374e:	4613      	mov	r3, r2
 8003750:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003752:	2300      	movs	r3, #0
 8003754:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800375e:	d112      	bne.n	8003786 <HAL_SPI_Receive+0x44>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10e      	bne.n	8003786 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2204      	movs	r2, #4
 800376c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003770:	88fa      	ldrh	r2, [r7, #6]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	9300      	str	r3, [sp, #0]
 8003776:	4613      	mov	r3, r2
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	68b9      	ldr	r1, [r7, #8]
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f000 f910 	bl	80039a2 <HAL_SPI_TransmitReceive>
 8003782:	4603      	mov	r3, r0
 8003784:	e109      	b.n	800399a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800378c:	2b01      	cmp	r3, #1
 800378e:	d101      	bne.n	8003794 <HAL_SPI_Receive+0x52>
 8003790:	2302      	movs	r3, #2
 8003792:	e102      	b.n	800399a <HAL_SPI_Receive+0x258>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800379c:	f7fd fcf8 	bl	8001190 <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d002      	beq.n	80037b4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80037ae:	2302      	movs	r3, #2
 80037b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80037b2:	e0e9      	b.n	8003988 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d002      	beq.n	80037c0 <HAL_SPI_Receive+0x7e>
 80037ba:	88fb      	ldrh	r3, [r7, #6]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d102      	bne.n	80037c6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80037c4:	e0e0      	b.n	8003988 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2204      	movs	r2, #4
 80037ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	88fa      	ldrh	r2, [r7, #6]
 80037de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	88fa      	ldrh	r2, [r7, #6]
 80037e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003810:	d908      	bls.n	8003824 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003820:	605a      	str	r2, [r3, #4]
 8003822:	e007      	b.n	8003834 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	685a      	ldr	r2, [r3, #4]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003832:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800383c:	d10f      	bne.n	800385e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800384c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800385c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003868:	2b40      	cmp	r3, #64	; 0x40
 800386a:	d007      	beq.n	800387c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800387a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003884:	d867      	bhi.n	8003956 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003886:	e030      	b.n	80038ea <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b01      	cmp	r3, #1
 8003894:	d117      	bne.n	80038c6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f103 020c 	add.w	r2, r3, #12
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	7812      	ldrb	r2, [r2, #0]
 80038a4:	b2d2      	uxtb	r2, r2
 80038a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ac:	1c5a      	adds	r2, r3, #1
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b29a      	uxth	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80038c4:	e011      	b.n	80038ea <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038c6:	f7fd fc63 	bl	8001190 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d803      	bhi.n	80038de <HAL_SPI_Receive+0x19c>
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038dc:	d102      	bne.n	80038e4 <HAL_SPI_Receive+0x1a2>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d102      	bne.n	80038ea <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80038e8:	e04e      	b.n	8003988 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1c8      	bne.n	8003888 <HAL_SPI_Receive+0x146>
 80038f6:	e034      	b.n	8003962 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b01      	cmp	r3, #1
 8003904:	d115      	bne.n	8003932 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68da      	ldr	r2, [r3, #12]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003910:	b292      	uxth	r2, r2
 8003912:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003918:	1c9a      	adds	r2, r3, #2
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003924:	b29b      	uxth	r3, r3
 8003926:	3b01      	subs	r3, #1
 8003928:	b29a      	uxth	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003930:	e011      	b.n	8003956 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003932:	f7fd fc2d 	bl	8001190 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	429a      	cmp	r2, r3
 8003940:	d803      	bhi.n	800394a <HAL_SPI_Receive+0x208>
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003948:	d102      	bne.n	8003950 <HAL_SPI_Receive+0x20e>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d102      	bne.n	8003956 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003954:	e018      	b.n	8003988 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800395c:	b29b      	uxth	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1ca      	bne.n	80038f8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	6839      	ldr	r1, [r7, #0]
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f000 fb4c 	bl	8004004 <SPI_EndRxTransaction>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d002      	beq.n	8003978 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2220      	movs	r2, #32
 8003976:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800397c:	2b00      	cmp	r3, #0
 800397e:	d002      	beq.n	8003986 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	75fb      	strb	r3, [r7, #23]
 8003984:	e000      	b.n	8003988 <HAL_SPI_Receive+0x246>
  }

error :
 8003986:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003998:	7dfb      	ldrb	r3, [r7, #23]
}
 800399a:	4618      	mov	r0, r3
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b08a      	sub	sp, #40	; 0x28
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	60f8      	str	r0, [r7, #12]
 80039aa:	60b9      	str	r1, [r7, #8]
 80039ac:	607a      	str	r2, [r7, #4]
 80039ae:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80039b0:	2301      	movs	r3, #1
 80039b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80039b4:	2300      	movs	r3, #0
 80039b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d101      	bne.n	80039c8 <HAL_SPI_TransmitReceive+0x26>
 80039c4:	2302      	movs	r3, #2
 80039c6:	e1fb      	b.n	8003dc0 <HAL_SPI_TransmitReceive+0x41e>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039d0:	f7fd fbde 	bl	8001190 <HAL_GetTick>
 80039d4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80039dc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80039e4:	887b      	ldrh	r3, [r7, #2]
 80039e6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80039e8:	887b      	ldrh	r3, [r7, #2]
 80039ea:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80039ec:	7efb      	ldrb	r3, [r7, #27]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d00e      	beq.n	8003a10 <HAL_SPI_TransmitReceive+0x6e>
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039f8:	d106      	bne.n	8003a08 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d102      	bne.n	8003a08 <HAL_SPI_TransmitReceive+0x66>
 8003a02:	7efb      	ldrb	r3, [r7, #27]
 8003a04:	2b04      	cmp	r3, #4
 8003a06:	d003      	beq.n	8003a10 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003a08:	2302      	movs	r3, #2
 8003a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003a0e:	e1cd      	b.n	8003dac <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d005      	beq.n	8003a22 <HAL_SPI_TransmitReceive+0x80>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d002      	beq.n	8003a22 <HAL_SPI_TransmitReceive+0x80>
 8003a1c:	887b      	ldrh	r3, [r7, #2]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d103      	bne.n	8003a2a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003a28:	e1c0      	b.n	8003dac <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d003      	beq.n	8003a3e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2205      	movs	r2, #5
 8003a3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	887a      	ldrh	r2, [r7, #2]
 8003a4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	887a      	ldrh	r2, [r7, #2]
 8003a56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	887a      	ldrh	r2, [r7, #2]
 8003a64:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	887a      	ldrh	r2, [r7, #2]
 8003a6a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a80:	d802      	bhi.n	8003a88 <HAL_SPI_TransmitReceive+0xe6>
 8003a82:	8a3b      	ldrh	r3, [r7, #16]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d908      	bls.n	8003a9a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a96:	605a      	str	r2, [r3, #4]
 8003a98:	e007      	b.n	8003aaa <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003aa8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab4:	2b40      	cmp	r3, #64	; 0x40
 8003ab6:	d007      	beq.n	8003ac8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ac6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ad0:	d97c      	bls.n	8003bcc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d002      	beq.n	8003ae0 <HAL_SPI_TransmitReceive+0x13e>
 8003ada:	8a7b      	ldrh	r3, [r7, #18]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d169      	bne.n	8003bb4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae4:	881a      	ldrh	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af0:	1c9a      	adds	r2, r3, #2
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	3b01      	subs	r3, #1
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b04:	e056      	b.n	8003bb4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d11b      	bne.n	8003b4c <HAL_SPI_TransmitReceive+0x1aa>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d016      	beq.n	8003b4c <HAL_SPI_TransmitReceive+0x1aa>
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d113      	bne.n	8003b4c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b28:	881a      	ldrh	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b34:	1c9a      	adds	r2, r3, #2
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	3b01      	subs	r3, #1
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d11c      	bne.n	8003b94 <HAL_SPI_TransmitReceive+0x1f2>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d016      	beq.n	8003b94 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68da      	ldr	r2, [r3, #12]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b70:	b292      	uxth	r2, r2
 8003b72:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b78:	1c9a      	adds	r2, r3, #2
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	3b01      	subs	r3, #1
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b90:	2301      	movs	r3, #1
 8003b92:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b94:	f7fd fafc 	bl	8001190 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d807      	bhi.n	8003bb4 <HAL_SPI_TransmitReceive+0x212>
 8003ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003baa:	d003      	beq.n	8003bb4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003bb2:	e0fb      	b.n	8003dac <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1a3      	bne.n	8003b06 <HAL_SPI_TransmitReceive+0x164>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d19d      	bne.n	8003b06 <HAL_SPI_TransmitReceive+0x164>
 8003bca:	e0df      	b.n	8003d8c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <HAL_SPI_TransmitReceive+0x23a>
 8003bd4:	8a7b      	ldrh	r3, [r7, #18]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	f040 80cb 	bne.w	8003d72 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d912      	bls.n	8003c0c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bea:	881a      	ldrh	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf6:	1c9a      	adds	r2, r3, #2
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	3b02      	subs	r3, #2
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c0a:	e0b2      	b.n	8003d72 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	330c      	adds	r3, #12
 8003c16:	7812      	ldrb	r2, [r2, #0]
 8003c18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1e:	1c5a      	adds	r2, r3, #1
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c32:	e09e      	b.n	8003d72 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d134      	bne.n	8003cac <HAL_SPI_TransmitReceive+0x30a>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d02f      	beq.n	8003cac <HAL_SPI_TransmitReceive+0x30a>
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d12c      	bne.n	8003cac <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d912      	bls.n	8003c82 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c60:	881a      	ldrh	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6c:	1c9a      	adds	r2, r3, #2
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	3b02      	subs	r3, #2
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c80:	e012      	b.n	8003ca8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	330c      	adds	r3, #12
 8003c8c:	7812      	ldrb	r2, [r2, #0]
 8003c8e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c94:	1c5a      	adds	r2, r3, #1
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d148      	bne.n	8003d4c <HAL_SPI_TransmitReceive+0x3aa>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d042      	beq.n	8003d4c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d923      	bls.n	8003d1a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68da      	ldr	r2, [r3, #12]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cdc:	b292      	uxth	r2, r2
 8003cde:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce4:	1c9a      	adds	r2, r3, #2
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	3b02      	subs	r3, #2
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d81f      	bhi.n	8003d48 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d16:	605a      	str	r2, [r3, #4]
 8003d18:	e016      	b.n	8003d48 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f103 020c 	add.w	r2, r3, #12
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	7812      	ldrb	r2, [r2, #0]
 8003d28:	b2d2      	uxtb	r2, r2
 8003d2a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d30:	1c5a      	adds	r2, r3, #1
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003d4c:	f7fd fa20 	bl	8001190 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d803      	bhi.n	8003d64 <HAL_SPI_TransmitReceive+0x3c2>
 8003d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d62:	d102      	bne.n	8003d6a <HAL_SPI_TransmitReceive+0x3c8>
 8003d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d103      	bne.n	8003d72 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003d70:	e01c      	b.n	8003dac <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f47f af5b 	bne.w	8003c34 <HAL_SPI_TransmitReceive+0x292>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f47f af54 	bne.w	8003c34 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d8c:	69fa      	ldr	r2, [r7, #28]
 8003d8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f000 f9b3 	bl	80040fc <SPI_EndRxTxTransaction>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d006      	beq.n	8003daa <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2220      	movs	r2, #32
 8003da6:	661a      	str	r2, [r3, #96]	; 0x60
 8003da8:	e000      	b.n	8003dac <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003daa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003dbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3728      	adds	r7, #40	; 0x28
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b088      	sub	sp, #32
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	603b      	str	r3, [r7, #0]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003dd8:	f7fd f9da 	bl	8001190 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de0:	1a9b      	subs	r3, r3, r2
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	4413      	add	r3, r2
 8003de6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003de8:	f7fd f9d2 	bl	8001190 <HAL_GetTick>
 8003dec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003dee:	4b39      	ldr	r3, [pc, #228]	; (8003ed4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	015b      	lsls	r3, r3, #5
 8003df4:	0d1b      	lsrs	r3, r3, #20
 8003df6:	69fa      	ldr	r2, [r7, #28]
 8003df8:	fb02 f303 	mul.w	r3, r2, r3
 8003dfc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dfe:	e054      	b.n	8003eaa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e06:	d050      	beq.n	8003eaa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e08:	f7fd f9c2 	bl	8001190 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	69fa      	ldr	r2, [r7, #28]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d902      	bls.n	8003e1e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d13d      	bne.n	8003e9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e36:	d111      	bne.n	8003e5c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e40:	d004      	beq.n	8003e4c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e4a:	d107      	bne.n	8003e5c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e64:	d10f      	bne.n	8003e86 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e74:	601a      	str	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e017      	b.n	8003eca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	68ba      	ldr	r2, [r7, #8]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	bf0c      	ite	eq
 8003eba:	2301      	moveq	r3, #1
 8003ebc:	2300      	movne	r3, #0
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	79fb      	ldrb	r3, [r7, #7]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d19b      	bne.n	8003e00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3720      	adds	r7, #32
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	20000014 	.word	0x20000014

08003ed8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b08a      	sub	sp, #40	; 0x28
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
 8003ee4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003eea:	f7fd f951 	bl	8001190 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef2:	1a9b      	subs	r3, r3, r2
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003efa:	f7fd f949 	bl	8001190 <HAL_GetTick>
 8003efe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	330c      	adds	r3, #12
 8003f06:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003f08:	4b3d      	ldr	r3, [pc, #244]	; (8004000 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4413      	add	r3, r2
 8003f12:	00da      	lsls	r2, r3, #3
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	0d1b      	lsrs	r3, r3, #20
 8003f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f1a:	fb02 f303 	mul.w	r3, r2, r3
 8003f1e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003f20:	e060      	b.n	8003fe4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003f28:	d107      	bne.n	8003f3a <SPI_WaitFifoStateUntilTimeout+0x62>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d104      	bne.n	8003f3a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003f38:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f40:	d050      	beq.n	8003fe4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f42:	f7fd f925 	bl	8001190 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	6a3b      	ldr	r3, [r7, #32]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d902      	bls.n	8003f58 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d13d      	bne.n	8003fd4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f66:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f70:	d111      	bne.n	8003f96 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f7a:	d004      	beq.n	8003f86 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f84:	d107      	bne.n	8003f96 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f94:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f9e:	d10f      	bne.n	8003fc0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fbe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e010      	b.n	8003ff6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689a      	ldr	r2, [r3, #8]
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	4013      	ands	r3, r2
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d196      	bne.n	8003f22 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3728      	adds	r7, #40	; 0x28
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	20000014 	.word	0x20000014

08004004 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b088      	sub	sp, #32
 8004008:	af02      	add	r7, sp, #8
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004018:	d111      	bne.n	800403e <SPI_EndRxTransaction+0x3a>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004022:	d004      	beq.n	800402e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800402c:	d107      	bne.n	800403e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800403c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004046:	d112      	bne.n	800406e <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	9300      	str	r3, [sp, #0]
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	2200      	movs	r2, #0
 8004050:	2180      	movs	r1, #128	; 0x80
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	f7ff feb8 	bl	8003dc8 <SPI_WaitFlagStateUntilTimeout>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d021      	beq.n	80040a2 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004062:	f043 0220 	orr.w	r2, r3, #32
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e03d      	b.n	80040ea <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800406e:	4b21      	ldr	r3, [pc, #132]	; (80040f4 <SPI_EndRxTransaction+0xf0>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a21      	ldr	r2, [pc, #132]	; (80040f8 <SPI_EndRxTransaction+0xf4>)
 8004074:	fba2 2303 	umull	r2, r3, r2, r3
 8004078:	0d5b      	lsrs	r3, r3, #21
 800407a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800407e:	fb02 f303 	mul.w	r3, r2, r3
 8004082:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00a      	beq.n	80040a0 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	3b01      	subs	r3, #1
 800408e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800409a:	2b80      	cmp	r3, #128	; 0x80
 800409c:	d0f2      	beq.n	8004084 <SPI_EndRxTransaction+0x80>
 800409e:	e000      	b.n	80040a2 <SPI_EndRxTransaction+0x9e>
        break;
 80040a0:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040aa:	d11d      	bne.n	80040e8 <SPI_EndRxTransaction+0xe4>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040b4:	d004      	beq.n	80040c0 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040be:	d113      	bne.n	80040e8 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	9300      	str	r3, [sp, #0]
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f7ff ff03 	bl	8003ed8 <SPI_WaitFifoStateUntilTimeout>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d007      	beq.n	80040e8 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040dc:	f043 0220 	orr.w	r2, r3, #32
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e000      	b.n	80040ea <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3718      	adds	r7, #24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	20000014 	.word	0x20000014
 80040f8:	165e9f81 	.word	0x165e9f81

080040fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b088      	sub	sp, #32
 8004100:	af02      	add	r7, sp, #8
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	2200      	movs	r2, #0
 8004110:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f7ff fedf 	bl	8003ed8 <SPI_WaitFifoStateUntilTimeout>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d007      	beq.n	8004130 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004124:	f043 0220 	orr.w	r2, r3, #32
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e046      	b.n	80041be <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004130:	4b25      	ldr	r3, [pc, #148]	; (80041c8 <SPI_EndRxTxTransaction+0xcc>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a25      	ldr	r2, [pc, #148]	; (80041cc <SPI_EndRxTxTransaction+0xd0>)
 8004136:	fba2 2303 	umull	r2, r3, r2, r3
 800413a:	0d5b      	lsrs	r3, r3, #21
 800413c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004140:	fb02 f303 	mul.w	r3, r2, r3
 8004144:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800414e:	d112      	bne.n	8004176 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	2200      	movs	r2, #0
 8004158:	2180      	movs	r1, #128	; 0x80
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	f7ff fe34 	bl	8003dc8 <SPI_WaitFlagStateUntilTimeout>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d016      	beq.n	8004194 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800416a:	f043 0220 	orr.w	r2, r3, #32
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e023      	b.n	80041be <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	3b01      	subs	r3, #1
 8004180:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418c:	2b80      	cmp	r3, #128	; 0x80
 800418e:	d0f2      	beq.n	8004176 <SPI_EndRxTxTransaction+0x7a>
 8004190:	e000      	b.n	8004194 <SPI_EndRxTxTransaction+0x98>
        break;
 8004192:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	2200      	movs	r2, #0
 800419c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f7ff fe99 	bl	8003ed8 <SPI_WaitFifoStateUntilTimeout>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d007      	beq.n	80041bc <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041b0:	f043 0220 	orr.w	r2, r3, #32
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e000      	b.n	80041be <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3718      	adds	r7, #24
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	20000014 	.word	0x20000014
 80041cc:	165e9f81 	.word	0x165e9f81

080041d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e040      	b.n	8004264 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d106      	bne.n	80041f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f7fc fe3c 	bl	8000e70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2224      	movs	r2, #36	; 0x24
 80041fc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f022 0201 	bic.w	r2, r2, #1
 800420c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f82c 	bl	800426c <UART_SetConfig>
 8004214:	4603      	mov	r3, r0
 8004216:	2b01      	cmp	r3, #1
 8004218:	d101      	bne.n	800421e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e022      	b.n	8004264 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004222:	2b00      	cmp	r3, #0
 8004224:	d002      	beq.n	800422c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 fa84 	bl	8004734 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800423a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	689a      	ldr	r2, [r3, #8]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800424a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f042 0201 	orr.w	r2, r2, #1
 800425a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 fb0b 	bl	8004878 <UART_CheckIdleState>
 8004262:	4603      	mov	r3, r0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3708      	adds	r7, #8
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b088      	sub	sp, #32
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004274:	2300      	movs	r3, #0
 8004276:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689a      	ldr	r2, [r3, #8]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	431a      	orrs	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	431a      	orrs	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	69db      	ldr	r3, [r3, #28]
 800428c:	4313      	orrs	r3, r2
 800428e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	4ba6      	ldr	r3, [pc, #664]	; (8004530 <UART_SetConfig+0x2c4>)
 8004298:	4013      	ands	r3, r2
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6812      	ldr	r2, [r2, #0]
 800429e:	6979      	ldr	r1, [r7, #20]
 80042a0:	430b      	orrs	r3, r1
 80042a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68da      	ldr	r2, [r3, #12]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	430a      	orrs	r2, r1
 80042b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	430a      	orrs	r2, r1
 80042dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a94      	ldr	r2, [pc, #592]	; (8004534 <UART_SetConfig+0x2c8>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d120      	bne.n	800432a <UART_SetConfig+0xbe>
 80042e8:	4b93      	ldr	r3, [pc, #588]	; (8004538 <UART_SetConfig+0x2cc>)
 80042ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ee:	f003 0303 	and.w	r3, r3, #3
 80042f2:	2b03      	cmp	r3, #3
 80042f4:	d816      	bhi.n	8004324 <UART_SetConfig+0xb8>
 80042f6:	a201      	add	r2, pc, #4	; (adr r2, 80042fc <UART_SetConfig+0x90>)
 80042f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fc:	0800430d 	.word	0x0800430d
 8004300:	08004319 	.word	0x08004319
 8004304:	08004313 	.word	0x08004313
 8004308:	0800431f 	.word	0x0800431f
 800430c:	2301      	movs	r3, #1
 800430e:	77fb      	strb	r3, [r7, #31]
 8004310:	e150      	b.n	80045b4 <UART_SetConfig+0x348>
 8004312:	2302      	movs	r3, #2
 8004314:	77fb      	strb	r3, [r7, #31]
 8004316:	e14d      	b.n	80045b4 <UART_SetConfig+0x348>
 8004318:	2304      	movs	r3, #4
 800431a:	77fb      	strb	r3, [r7, #31]
 800431c:	e14a      	b.n	80045b4 <UART_SetConfig+0x348>
 800431e:	2308      	movs	r3, #8
 8004320:	77fb      	strb	r3, [r7, #31]
 8004322:	e147      	b.n	80045b4 <UART_SetConfig+0x348>
 8004324:	2310      	movs	r3, #16
 8004326:	77fb      	strb	r3, [r7, #31]
 8004328:	e144      	b.n	80045b4 <UART_SetConfig+0x348>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a83      	ldr	r2, [pc, #524]	; (800453c <UART_SetConfig+0x2d0>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d132      	bne.n	800439a <UART_SetConfig+0x12e>
 8004334:	4b80      	ldr	r3, [pc, #512]	; (8004538 <UART_SetConfig+0x2cc>)
 8004336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800433a:	f003 030c 	and.w	r3, r3, #12
 800433e:	2b0c      	cmp	r3, #12
 8004340:	d828      	bhi.n	8004394 <UART_SetConfig+0x128>
 8004342:	a201      	add	r2, pc, #4	; (adr r2, 8004348 <UART_SetConfig+0xdc>)
 8004344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004348:	0800437d 	.word	0x0800437d
 800434c:	08004395 	.word	0x08004395
 8004350:	08004395 	.word	0x08004395
 8004354:	08004395 	.word	0x08004395
 8004358:	08004389 	.word	0x08004389
 800435c:	08004395 	.word	0x08004395
 8004360:	08004395 	.word	0x08004395
 8004364:	08004395 	.word	0x08004395
 8004368:	08004383 	.word	0x08004383
 800436c:	08004395 	.word	0x08004395
 8004370:	08004395 	.word	0x08004395
 8004374:	08004395 	.word	0x08004395
 8004378:	0800438f 	.word	0x0800438f
 800437c:	2300      	movs	r3, #0
 800437e:	77fb      	strb	r3, [r7, #31]
 8004380:	e118      	b.n	80045b4 <UART_SetConfig+0x348>
 8004382:	2302      	movs	r3, #2
 8004384:	77fb      	strb	r3, [r7, #31]
 8004386:	e115      	b.n	80045b4 <UART_SetConfig+0x348>
 8004388:	2304      	movs	r3, #4
 800438a:	77fb      	strb	r3, [r7, #31]
 800438c:	e112      	b.n	80045b4 <UART_SetConfig+0x348>
 800438e:	2308      	movs	r3, #8
 8004390:	77fb      	strb	r3, [r7, #31]
 8004392:	e10f      	b.n	80045b4 <UART_SetConfig+0x348>
 8004394:	2310      	movs	r3, #16
 8004396:	77fb      	strb	r3, [r7, #31]
 8004398:	e10c      	b.n	80045b4 <UART_SetConfig+0x348>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a68      	ldr	r2, [pc, #416]	; (8004540 <UART_SetConfig+0x2d4>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d120      	bne.n	80043e6 <UART_SetConfig+0x17a>
 80043a4:	4b64      	ldr	r3, [pc, #400]	; (8004538 <UART_SetConfig+0x2cc>)
 80043a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80043ae:	2b30      	cmp	r3, #48	; 0x30
 80043b0:	d013      	beq.n	80043da <UART_SetConfig+0x16e>
 80043b2:	2b30      	cmp	r3, #48	; 0x30
 80043b4:	d814      	bhi.n	80043e0 <UART_SetConfig+0x174>
 80043b6:	2b20      	cmp	r3, #32
 80043b8:	d009      	beq.n	80043ce <UART_SetConfig+0x162>
 80043ba:	2b20      	cmp	r3, #32
 80043bc:	d810      	bhi.n	80043e0 <UART_SetConfig+0x174>
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d002      	beq.n	80043c8 <UART_SetConfig+0x15c>
 80043c2:	2b10      	cmp	r3, #16
 80043c4:	d006      	beq.n	80043d4 <UART_SetConfig+0x168>
 80043c6:	e00b      	b.n	80043e0 <UART_SetConfig+0x174>
 80043c8:	2300      	movs	r3, #0
 80043ca:	77fb      	strb	r3, [r7, #31]
 80043cc:	e0f2      	b.n	80045b4 <UART_SetConfig+0x348>
 80043ce:	2302      	movs	r3, #2
 80043d0:	77fb      	strb	r3, [r7, #31]
 80043d2:	e0ef      	b.n	80045b4 <UART_SetConfig+0x348>
 80043d4:	2304      	movs	r3, #4
 80043d6:	77fb      	strb	r3, [r7, #31]
 80043d8:	e0ec      	b.n	80045b4 <UART_SetConfig+0x348>
 80043da:	2308      	movs	r3, #8
 80043dc:	77fb      	strb	r3, [r7, #31]
 80043de:	e0e9      	b.n	80045b4 <UART_SetConfig+0x348>
 80043e0:	2310      	movs	r3, #16
 80043e2:	77fb      	strb	r3, [r7, #31]
 80043e4:	e0e6      	b.n	80045b4 <UART_SetConfig+0x348>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a56      	ldr	r2, [pc, #344]	; (8004544 <UART_SetConfig+0x2d8>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d120      	bne.n	8004432 <UART_SetConfig+0x1c6>
 80043f0:	4b51      	ldr	r3, [pc, #324]	; (8004538 <UART_SetConfig+0x2cc>)
 80043f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80043fa:	2bc0      	cmp	r3, #192	; 0xc0
 80043fc:	d013      	beq.n	8004426 <UART_SetConfig+0x1ba>
 80043fe:	2bc0      	cmp	r3, #192	; 0xc0
 8004400:	d814      	bhi.n	800442c <UART_SetConfig+0x1c0>
 8004402:	2b80      	cmp	r3, #128	; 0x80
 8004404:	d009      	beq.n	800441a <UART_SetConfig+0x1ae>
 8004406:	2b80      	cmp	r3, #128	; 0x80
 8004408:	d810      	bhi.n	800442c <UART_SetConfig+0x1c0>
 800440a:	2b00      	cmp	r3, #0
 800440c:	d002      	beq.n	8004414 <UART_SetConfig+0x1a8>
 800440e:	2b40      	cmp	r3, #64	; 0x40
 8004410:	d006      	beq.n	8004420 <UART_SetConfig+0x1b4>
 8004412:	e00b      	b.n	800442c <UART_SetConfig+0x1c0>
 8004414:	2300      	movs	r3, #0
 8004416:	77fb      	strb	r3, [r7, #31]
 8004418:	e0cc      	b.n	80045b4 <UART_SetConfig+0x348>
 800441a:	2302      	movs	r3, #2
 800441c:	77fb      	strb	r3, [r7, #31]
 800441e:	e0c9      	b.n	80045b4 <UART_SetConfig+0x348>
 8004420:	2304      	movs	r3, #4
 8004422:	77fb      	strb	r3, [r7, #31]
 8004424:	e0c6      	b.n	80045b4 <UART_SetConfig+0x348>
 8004426:	2308      	movs	r3, #8
 8004428:	77fb      	strb	r3, [r7, #31]
 800442a:	e0c3      	b.n	80045b4 <UART_SetConfig+0x348>
 800442c:	2310      	movs	r3, #16
 800442e:	77fb      	strb	r3, [r7, #31]
 8004430:	e0c0      	b.n	80045b4 <UART_SetConfig+0x348>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a44      	ldr	r2, [pc, #272]	; (8004548 <UART_SetConfig+0x2dc>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d125      	bne.n	8004488 <UART_SetConfig+0x21c>
 800443c:	4b3e      	ldr	r3, [pc, #248]	; (8004538 <UART_SetConfig+0x2cc>)
 800443e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004446:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800444a:	d017      	beq.n	800447c <UART_SetConfig+0x210>
 800444c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004450:	d817      	bhi.n	8004482 <UART_SetConfig+0x216>
 8004452:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004456:	d00b      	beq.n	8004470 <UART_SetConfig+0x204>
 8004458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800445c:	d811      	bhi.n	8004482 <UART_SetConfig+0x216>
 800445e:	2b00      	cmp	r3, #0
 8004460:	d003      	beq.n	800446a <UART_SetConfig+0x1fe>
 8004462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004466:	d006      	beq.n	8004476 <UART_SetConfig+0x20a>
 8004468:	e00b      	b.n	8004482 <UART_SetConfig+0x216>
 800446a:	2300      	movs	r3, #0
 800446c:	77fb      	strb	r3, [r7, #31]
 800446e:	e0a1      	b.n	80045b4 <UART_SetConfig+0x348>
 8004470:	2302      	movs	r3, #2
 8004472:	77fb      	strb	r3, [r7, #31]
 8004474:	e09e      	b.n	80045b4 <UART_SetConfig+0x348>
 8004476:	2304      	movs	r3, #4
 8004478:	77fb      	strb	r3, [r7, #31]
 800447a:	e09b      	b.n	80045b4 <UART_SetConfig+0x348>
 800447c:	2308      	movs	r3, #8
 800447e:	77fb      	strb	r3, [r7, #31]
 8004480:	e098      	b.n	80045b4 <UART_SetConfig+0x348>
 8004482:	2310      	movs	r3, #16
 8004484:	77fb      	strb	r3, [r7, #31]
 8004486:	e095      	b.n	80045b4 <UART_SetConfig+0x348>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a2f      	ldr	r2, [pc, #188]	; (800454c <UART_SetConfig+0x2e0>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d125      	bne.n	80044de <UART_SetConfig+0x272>
 8004492:	4b29      	ldr	r3, [pc, #164]	; (8004538 <UART_SetConfig+0x2cc>)
 8004494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004498:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800449c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044a0:	d017      	beq.n	80044d2 <UART_SetConfig+0x266>
 80044a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044a6:	d817      	bhi.n	80044d8 <UART_SetConfig+0x26c>
 80044a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044ac:	d00b      	beq.n	80044c6 <UART_SetConfig+0x25a>
 80044ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044b2:	d811      	bhi.n	80044d8 <UART_SetConfig+0x26c>
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d003      	beq.n	80044c0 <UART_SetConfig+0x254>
 80044b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044bc:	d006      	beq.n	80044cc <UART_SetConfig+0x260>
 80044be:	e00b      	b.n	80044d8 <UART_SetConfig+0x26c>
 80044c0:	2301      	movs	r3, #1
 80044c2:	77fb      	strb	r3, [r7, #31]
 80044c4:	e076      	b.n	80045b4 <UART_SetConfig+0x348>
 80044c6:	2302      	movs	r3, #2
 80044c8:	77fb      	strb	r3, [r7, #31]
 80044ca:	e073      	b.n	80045b4 <UART_SetConfig+0x348>
 80044cc:	2304      	movs	r3, #4
 80044ce:	77fb      	strb	r3, [r7, #31]
 80044d0:	e070      	b.n	80045b4 <UART_SetConfig+0x348>
 80044d2:	2308      	movs	r3, #8
 80044d4:	77fb      	strb	r3, [r7, #31]
 80044d6:	e06d      	b.n	80045b4 <UART_SetConfig+0x348>
 80044d8:	2310      	movs	r3, #16
 80044da:	77fb      	strb	r3, [r7, #31]
 80044dc:	e06a      	b.n	80045b4 <UART_SetConfig+0x348>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a1b      	ldr	r2, [pc, #108]	; (8004550 <UART_SetConfig+0x2e4>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d138      	bne.n	800455a <UART_SetConfig+0x2ee>
 80044e8:	4b13      	ldr	r3, [pc, #76]	; (8004538 <UART_SetConfig+0x2cc>)
 80044ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80044f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80044f6:	d017      	beq.n	8004528 <UART_SetConfig+0x2bc>
 80044f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80044fc:	d82a      	bhi.n	8004554 <UART_SetConfig+0x2e8>
 80044fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004502:	d00b      	beq.n	800451c <UART_SetConfig+0x2b0>
 8004504:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004508:	d824      	bhi.n	8004554 <UART_SetConfig+0x2e8>
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <UART_SetConfig+0x2aa>
 800450e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004512:	d006      	beq.n	8004522 <UART_SetConfig+0x2b6>
 8004514:	e01e      	b.n	8004554 <UART_SetConfig+0x2e8>
 8004516:	2300      	movs	r3, #0
 8004518:	77fb      	strb	r3, [r7, #31]
 800451a:	e04b      	b.n	80045b4 <UART_SetConfig+0x348>
 800451c:	2302      	movs	r3, #2
 800451e:	77fb      	strb	r3, [r7, #31]
 8004520:	e048      	b.n	80045b4 <UART_SetConfig+0x348>
 8004522:	2304      	movs	r3, #4
 8004524:	77fb      	strb	r3, [r7, #31]
 8004526:	e045      	b.n	80045b4 <UART_SetConfig+0x348>
 8004528:	2308      	movs	r3, #8
 800452a:	77fb      	strb	r3, [r7, #31]
 800452c:	e042      	b.n	80045b4 <UART_SetConfig+0x348>
 800452e:	bf00      	nop
 8004530:	efff69f3 	.word	0xefff69f3
 8004534:	40011000 	.word	0x40011000
 8004538:	40023800 	.word	0x40023800
 800453c:	40004400 	.word	0x40004400
 8004540:	40004800 	.word	0x40004800
 8004544:	40004c00 	.word	0x40004c00
 8004548:	40005000 	.word	0x40005000
 800454c:	40011400 	.word	0x40011400
 8004550:	40007800 	.word	0x40007800
 8004554:	2310      	movs	r3, #16
 8004556:	77fb      	strb	r3, [r7, #31]
 8004558:	e02c      	b.n	80045b4 <UART_SetConfig+0x348>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a72      	ldr	r2, [pc, #456]	; (8004728 <UART_SetConfig+0x4bc>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d125      	bne.n	80045b0 <UART_SetConfig+0x344>
 8004564:	4b71      	ldr	r3, [pc, #452]	; (800472c <UART_SetConfig+0x4c0>)
 8004566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800456e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004572:	d017      	beq.n	80045a4 <UART_SetConfig+0x338>
 8004574:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004578:	d817      	bhi.n	80045aa <UART_SetConfig+0x33e>
 800457a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800457e:	d00b      	beq.n	8004598 <UART_SetConfig+0x32c>
 8004580:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004584:	d811      	bhi.n	80045aa <UART_SetConfig+0x33e>
 8004586:	2b00      	cmp	r3, #0
 8004588:	d003      	beq.n	8004592 <UART_SetConfig+0x326>
 800458a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800458e:	d006      	beq.n	800459e <UART_SetConfig+0x332>
 8004590:	e00b      	b.n	80045aa <UART_SetConfig+0x33e>
 8004592:	2300      	movs	r3, #0
 8004594:	77fb      	strb	r3, [r7, #31]
 8004596:	e00d      	b.n	80045b4 <UART_SetConfig+0x348>
 8004598:	2302      	movs	r3, #2
 800459a:	77fb      	strb	r3, [r7, #31]
 800459c:	e00a      	b.n	80045b4 <UART_SetConfig+0x348>
 800459e:	2304      	movs	r3, #4
 80045a0:	77fb      	strb	r3, [r7, #31]
 80045a2:	e007      	b.n	80045b4 <UART_SetConfig+0x348>
 80045a4:	2308      	movs	r3, #8
 80045a6:	77fb      	strb	r3, [r7, #31]
 80045a8:	e004      	b.n	80045b4 <UART_SetConfig+0x348>
 80045aa:	2310      	movs	r3, #16
 80045ac:	77fb      	strb	r3, [r7, #31]
 80045ae:	e001      	b.n	80045b4 <UART_SetConfig+0x348>
 80045b0:	2310      	movs	r3, #16
 80045b2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	69db      	ldr	r3, [r3, #28]
 80045b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045bc:	d15b      	bne.n	8004676 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80045be:	7ffb      	ldrb	r3, [r7, #31]
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d828      	bhi.n	8004616 <UART_SetConfig+0x3aa>
 80045c4:	a201      	add	r2, pc, #4	; (adr r2, 80045cc <UART_SetConfig+0x360>)
 80045c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ca:	bf00      	nop
 80045cc:	080045f1 	.word	0x080045f1
 80045d0:	080045f9 	.word	0x080045f9
 80045d4:	08004601 	.word	0x08004601
 80045d8:	08004617 	.word	0x08004617
 80045dc:	08004607 	.word	0x08004607
 80045e0:	08004617 	.word	0x08004617
 80045e4:	08004617 	.word	0x08004617
 80045e8:	08004617 	.word	0x08004617
 80045ec:	0800460f 	.word	0x0800460f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045f0:	f7fe fa3e 	bl	8002a70 <HAL_RCC_GetPCLK1Freq>
 80045f4:	61b8      	str	r0, [r7, #24]
        break;
 80045f6:	e013      	b.n	8004620 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045f8:	f7fe fa4e 	bl	8002a98 <HAL_RCC_GetPCLK2Freq>
 80045fc:	61b8      	str	r0, [r7, #24]
        break;
 80045fe:	e00f      	b.n	8004620 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004600:	4b4b      	ldr	r3, [pc, #300]	; (8004730 <UART_SetConfig+0x4c4>)
 8004602:	61bb      	str	r3, [r7, #24]
        break;
 8004604:	e00c      	b.n	8004620 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004606:	f7fe f921 	bl	800284c <HAL_RCC_GetSysClockFreq>
 800460a:	61b8      	str	r0, [r7, #24]
        break;
 800460c:	e008      	b.n	8004620 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800460e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004612:	61bb      	str	r3, [r7, #24]
        break;
 8004614:	e004      	b.n	8004620 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004616:	2300      	movs	r3, #0
 8004618:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	77bb      	strb	r3, [r7, #30]
        break;
 800461e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d074      	beq.n	8004710 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	005a      	lsls	r2, r3, #1
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	085b      	lsrs	r3, r3, #1
 8004630:	441a      	add	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	fbb2 f3f3 	udiv	r3, r2, r3
 800463a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	2b0f      	cmp	r3, #15
 8004640:	d916      	bls.n	8004670 <UART_SetConfig+0x404>
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004648:	d212      	bcs.n	8004670 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	b29b      	uxth	r3, r3
 800464e:	f023 030f 	bic.w	r3, r3, #15
 8004652:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	085b      	lsrs	r3, r3, #1
 8004658:	b29b      	uxth	r3, r3
 800465a:	f003 0307 	and.w	r3, r3, #7
 800465e:	b29a      	uxth	r2, r3
 8004660:	89fb      	ldrh	r3, [r7, #14]
 8004662:	4313      	orrs	r3, r2
 8004664:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	89fa      	ldrh	r2, [r7, #14]
 800466c:	60da      	str	r2, [r3, #12]
 800466e:	e04f      	b.n	8004710 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	77bb      	strb	r3, [r7, #30]
 8004674:	e04c      	b.n	8004710 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004676:	7ffb      	ldrb	r3, [r7, #31]
 8004678:	2b08      	cmp	r3, #8
 800467a:	d828      	bhi.n	80046ce <UART_SetConfig+0x462>
 800467c:	a201      	add	r2, pc, #4	; (adr r2, 8004684 <UART_SetConfig+0x418>)
 800467e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004682:	bf00      	nop
 8004684:	080046a9 	.word	0x080046a9
 8004688:	080046b1 	.word	0x080046b1
 800468c:	080046b9 	.word	0x080046b9
 8004690:	080046cf 	.word	0x080046cf
 8004694:	080046bf 	.word	0x080046bf
 8004698:	080046cf 	.word	0x080046cf
 800469c:	080046cf 	.word	0x080046cf
 80046a0:	080046cf 	.word	0x080046cf
 80046a4:	080046c7 	.word	0x080046c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046a8:	f7fe f9e2 	bl	8002a70 <HAL_RCC_GetPCLK1Freq>
 80046ac:	61b8      	str	r0, [r7, #24]
        break;
 80046ae:	e013      	b.n	80046d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046b0:	f7fe f9f2 	bl	8002a98 <HAL_RCC_GetPCLK2Freq>
 80046b4:	61b8      	str	r0, [r7, #24]
        break;
 80046b6:	e00f      	b.n	80046d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046b8:	4b1d      	ldr	r3, [pc, #116]	; (8004730 <UART_SetConfig+0x4c4>)
 80046ba:	61bb      	str	r3, [r7, #24]
        break;
 80046bc:	e00c      	b.n	80046d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046be:	f7fe f8c5 	bl	800284c <HAL_RCC_GetSysClockFreq>
 80046c2:	61b8      	str	r0, [r7, #24]
        break;
 80046c4:	e008      	b.n	80046d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046ca:	61bb      	str	r3, [r7, #24]
        break;
 80046cc:	e004      	b.n	80046d8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80046ce:	2300      	movs	r3, #0
 80046d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	77bb      	strb	r3, [r7, #30]
        break;
 80046d6:	bf00      	nop
    }

    if (pclk != 0U)
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d018      	beq.n	8004710 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	085a      	lsrs	r2, r3, #1
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	441a      	add	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	2b0f      	cmp	r3, #15
 80046f6:	d909      	bls.n	800470c <UART_SetConfig+0x4a0>
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046fe:	d205      	bcs.n	800470c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	b29a      	uxth	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	60da      	str	r2, [r3, #12]
 800470a:	e001      	b.n	8004710 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800471c:	7fbb      	ldrb	r3, [r7, #30]
}
 800471e:	4618      	mov	r0, r3
 8004720:	3720      	adds	r7, #32
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	40007c00 	.word	0x40007c00
 800472c:	40023800 	.word	0x40023800
 8004730:	00f42400 	.word	0x00f42400

08004734 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00a      	beq.n	800475e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00a      	beq.n	8004780 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	430a      	orrs	r2, r1
 800477e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00a      	beq.n	80047a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	430a      	orrs	r2, r1
 80047a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a6:	f003 0308 	and.w	r3, r3, #8
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00a      	beq.n	80047c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	430a      	orrs	r2, r1
 80047c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c8:	f003 0310 	and.w	r3, r3, #16
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00a      	beq.n	80047e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ea:	f003 0320 	and.w	r3, r3, #32
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00a      	beq.n	8004808 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004810:	2b00      	cmp	r3, #0
 8004812:	d01a      	beq.n	800484a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004832:	d10a      	bne.n	800484a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00a      	beq.n	800486c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	430a      	orrs	r2, r1
 800486a:	605a      	str	r2, [r3, #4]
  }
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af02      	add	r7, sp, #8
 800487e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004888:	f7fc fc82 	bl	8001190 <HAL_GetTick>
 800488c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0308 	and.w	r3, r3, #8
 8004898:	2b08      	cmp	r3, #8
 800489a:	d10e      	bne.n	80048ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800489c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048a0:	9300      	str	r3, [sp, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f831 	bl	8004912 <UART_WaitOnFlagUntilTimeout>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e027      	b.n	800490a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	2b04      	cmp	r3, #4
 80048c6:	d10e      	bne.n	80048e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048cc:	9300      	str	r3, [sp, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f81b 	bl	8004912 <UART_WaitOnFlagUntilTimeout>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e011      	b.n	800490a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2220      	movs	r2, #32
 80048ea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2220      	movs	r2, #32
 80048f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b09c      	sub	sp, #112	; 0x70
 8004916:	af00      	add	r7, sp, #0
 8004918:	60f8      	str	r0, [r7, #12]
 800491a:	60b9      	str	r1, [r7, #8]
 800491c:	603b      	str	r3, [r7, #0]
 800491e:	4613      	mov	r3, r2
 8004920:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004922:	e0a7      	b.n	8004a74 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004924:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492a:	f000 80a3 	beq.w	8004a74 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800492e:	f7fc fc2f 	bl	8001190 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800493a:	429a      	cmp	r2, r3
 800493c:	d302      	bcc.n	8004944 <UART_WaitOnFlagUntilTimeout+0x32>
 800493e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004940:	2b00      	cmp	r3, #0
 8004942:	d13f      	bne.n	80049c4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800494c:	e853 3f00 	ldrex	r3, [r3]
 8004950:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004954:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004958:	667b      	str	r3, [r7, #100]	; 0x64
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	461a      	mov	r2, r3
 8004960:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004962:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004964:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004966:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004968:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800496a:	e841 2300 	strex	r3, r2, [r1]
 800496e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1e6      	bne.n	8004944 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	3308      	adds	r3, #8
 800497c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004980:	e853 3f00 	ldrex	r3, [r3]
 8004984:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004988:	f023 0301 	bic.w	r3, r3, #1
 800498c:	663b      	str	r3, [r7, #96]	; 0x60
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	3308      	adds	r3, #8
 8004994:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004996:	64ba      	str	r2, [r7, #72]	; 0x48
 8004998:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800499c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800499e:	e841 2300 	strex	r3, r2, [r1]
 80049a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80049a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1e5      	bne.n	8004976 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2220      	movs	r2, #32
 80049ae:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2220      	movs	r2, #32
 80049b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e068      	b.n	8004a96 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0304 	and.w	r3, r3, #4
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d050      	beq.n	8004a74 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	69db      	ldr	r3, [r3, #28]
 80049d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049e0:	d148      	bne.n	8004a74 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049ea:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f4:	e853 3f00 	ldrex	r3, [r3]
 80049f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	461a      	mov	r2, r3
 8004a08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a0a:	637b      	str	r3, [r7, #52]	; 0x34
 8004a0c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a12:	e841 2300 	strex	r3, r2, [r1]
 8004a16:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1e6      	bne.n	80049ec <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	3308      	adds	r3, #8
 8004a24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	e853 3f00 	ldrex	r3, [r3]
 8004a2c:	613b      	str	r3, [r7, #16]
   return(result);
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	f023 0301 	bic.w	r3, r3, #1
 8004a34:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	3308      	adds	r3, #8
 8004a3c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a3e:	623a      	str	r2, [r7, #32]
 8004a40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a42:	69f9      	ldr	r1, [r7, #28]
 8004a44:	6a3a      	ldr	r2, [r7, #32]
 8004a46:	e841 2300 	strex	r3, r2, [r1]
 8004a4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1e5      	bne.n	8004a1e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2220      	movs	r2, #32
 8004a56:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2220      	movs	r2, #32
 8004a64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e010      	b.n	8004a96 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	69da      	ldr	r2, [r3, #28]
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	bf0c      	ite	eq
 8004a84:	2301      	moveq	r3, #1
 8004a86:	2300      	movne	r3, #0
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	79fb      	ldrb	r3, [r7, #7]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	f43f af48 	beq.w	8004924 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3770      	adds	r7, #112	; 0x70
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
	...

08004aa0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004aa0:	b084      	sub	sp, #16
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b084      	sub	sp, #16
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
 8004aaa:	f107 001c 	add.w	r0, r7, #28
 8004aae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d120      	bne.n	8004afa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68da      	ldr	r2, [r3, #12]
 8004ac8:	4b20      	ldr	r3, [pc, #128]	; (8004b4c <USB_CoreInit+0xac>)
 8004aca:	4013      	ands	r3, r2
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004adc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d105      	bne.n	8004aee <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 fa96 	bl	8005020 <USB_CoreReset>
 8004af4:	4603      	mov	r3, r0
 8004af6:	73fb      	strb	r3, [r7, #15]
 8004af8:	e010      	b.n	8004b1c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 fa8a 	bl	8005020 <USB_CoreReset>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b14:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d10b      	bne.n	8004b3a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f043 0206 	orr.w	r2, r3, #6
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f043 0220 	orr.w	r2, r3, #32
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b46:	b004      	add	sp, #16
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	ffbdffbf 	.word	0xffbdffbf

08004b50 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f023 0201 	bic.w	r2, r3, #1
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004b72:	b580      	push	{r7, lr}
 8004b74:	b084      	sub	sp, #16
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b8e:	78fb      	ldrb	r3, [r7, #3]
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d115      	bne.n	8004bc0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ba0:	2001      	movs	r0, #1
 8004ba2:	f7fc fb01 	bl	80011a8 <HAL_Delay>
      ms++;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	3301      	adds	r3, #1
 8004baa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 fa29 	bl	8005004 <USB_GetMode>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d01e      	beq.n	8004bf6 <USB_SetCurrentMode+0x84>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2b31      	cmp	r3, #49	; 0x31
 8004bbc:	d9f0      	bls.n	8004ba0 <USB_SetCurrentMode+0x2e>
 8004bbe:	e01a      	b.n	8004bf6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004bc0:	78fb      	ldrb	r3, [r7, #3]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d115      	bne.n	8004bf2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004bd2:	2001      	movs	r0, #1
 8004bd4:	f7fc fae8 	bl	80011a8 <HAL_Delay>
      ms++;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 fa10 	bl	8005004 <USB_GetMode>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d005      	beq.n	8004bf6 <USB_SetCurrentMode+0x84>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2b31      	cmp	r3, #49	; 0x31
 8004bee:	d9f0      	bls.n	8004bd2 <USB_SetCurrentMode+0x60>
 8004bf0:	e001      	b.n	8004bf6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e005      	b.n	8004c02 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2b32      	cmp	r3, #50	; 0x32
 8004bfa:	d101      	bne.n	8004c00 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e000      	b.n	8004c02 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
	...

08004c0c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c0c:	b084      	sub	sp, #16
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b086      	sub	sp, #24
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
 8004c16:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004c1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004c26:	2300      	movs	r3, #0
 8004c28:	613b      	str	r3, [r7, #16]
 8004c2a:	e009      	b.n	8004c40 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	3340      	adds	r3, #64	; 0x40
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	4413      	add	r3, r2
 8004c36:	2200      	movs	r2, #0
 8004c38:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	613b      	str	r3, [r7, #16]
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	2b0e      	cmp	r3, #14
 8004c44:	d9f2      	bls.n	8004c2c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d11c      	bne.n	8004c86 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c5a:	f043 0302 	orr.w	r3, r3, #2
 8004c5e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c64:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	e005      	b.n	8004c92 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c98:	461a      	mov	r2, r3
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cac:	461a      	mov	r2, r3
 8004cae:	680b      	ldr	r3, [r1, #0]
 8004cb0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d10c      	bne.n	8004cd2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d104      	bne.n	8004cc8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004cbe:	2100      	movs	r1, #0
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 f965 	bl	8004f90 <USB_SetDevSpeed>
 8004cc6:	e008      	b.n	8004cda <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004cc8:	2101      	movs	r1, #1
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f960 	bl	8004f90 <USB_SetDevSpeed>
 8004cd0:	e003      	b.n	8004cda <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004cd2:	2103      	movs	r1, #3
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 f95b 	bl	8004f90 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004cda:	2110      	movs	r1, #16
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 f8f3 	bl	8004ec8 <USB_FlushTxFifo>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d001      	beq.n	8004cec <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 f91f 	bl	8004f30 <USB_FlushRxFifo>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d001      	beq.n	8004cfc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d02:	461a      	mov	r2, r3
 8004d04:	2300      	movs	r3, #0
 8004d06:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d0e:	461a      	mov	r2, r3
 8004d10:	2300      	movs	r3, #0
 8004d12:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d20:	2300      	movs	r3, #0
 8004d22:	613b      	str	r3, [r7, #16]
 8004d24:	e043      	b.n	8004dae <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	015a      	lsls	r2, r3, #5
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d3c:	d118      	bne.n	8004d70 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10a      	bne.n	8004d5a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	015a      	lsls	r2, r3, #5
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d50:	461a      	mov	r2, r3
 8004d52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d56:	6013      	str	r3, [r2, #0]
 8004d58:	e013      	b.n	8004d82 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	015a      	lsls	r2, r3, #5
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	4413      	add	r3, r2
 8004d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d66:	461a      	mov	r2, r3
 8004d68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d6c:	6013      	str	r3, [r2, #0]
 8004d6e:	e008      	b.n	8004d82 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	015a      	lsls	r2, r3, #5
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	4413      	add	r3, r2
 8004d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	2300      	movs	r3, #0
 8004d80:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	015a      	lsls	r2, r3, #5
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	4413      	add	r3, r2
 8004d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d8e:	461a      	mov	r2, r3
 8004d90:	2300      	movs	r3, #0
 8004d92:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da0:	461a      	mov	r2, r3
 8004da2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004da6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	3301      	adds	r3, #1
 8004dac:	613b      	str	r3, [r7, #16]
 8004dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d3b7      	bcc.n	8004d26 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004db6:	2300      	movs	r3, #0
 8004db8:	613b      	str	r3, [r7, #16]
 8004dba:	e043      	b.n	8004e44 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dd2:	d118      	bne.n	8004e06 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10a      	bne.n	8004df0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	015a      	lsls	r2, r3, #5
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	4413      	add	r3, r2
 8004de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de6:	461a      	mov	r2, r3
 8004de8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004dec:	6013      	str	r3, [r2, #0]
 8004dee:	e013      	b.n	8004e18 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	015a      	lsls	r2, r3, #5
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e02:	6013      	str	r3, [r2, #0]
 8004e04:	e008      	b.n	8004e18 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	015a      	lsls	r2, r3, #5
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e12:	461a      	mov	r2, r3
 8004e14:	2300      	movs	r3, #0
 8004e16:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	015a      	lsls	r2, r3, #5
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	4413      	add	r3, r2
 8004e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e24:	461a      	mov	r2, r3
 8004e26:	2300      	movs	r3, #0
 8004e28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	015a      	lsls	r2, r3, #5
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	4413      	add	r3, r2
 8004e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e36:	461a      	mov	r2, r3
 8004e38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e3c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	3301      	adds	r3, #1
 8004e42:	613b      	str	r3, [r7, #16]
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d3b7      	bcc.n	8004dbc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e5e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004e6c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d105      	bne.n	8004e80 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	f043 0210 	orr.w	r2, r3, #16
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	699a      	ldr	r2, [r3, #24]
 8004e84:	4b0e      	ldr	r3, [pc, #56]	; (8004ec0 <USB_DevInit+0x2b4>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d005      	beq.n	8004e9e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	f043 0208 	orr.w	r2, r3, #8
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d105      	bne.n	8004eb0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	699a      	ldr	r2, [r3, #24]
 8004ea8:	4b06      	ldr	r3, [pc, #24]	; (8004ec4 <USB_DevInit+0x2b8>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004eb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3718      	adds	r7, #24
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ebc:	b004      	add	sp, #16
 8004ebe:	4770      	bx	lr
 8004ec0:	803c3800 	.word	0x803c3800
 8004ec4:	40000004 	.word	0x40000004

08004ec8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	4a13      	ldr	r2, [pc, #76]	; (8004f2c <USB_FlushTxFifo+0x64>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d901      	bls.n	8004ee8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e01b      	b.n	8004f20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	daf2      	bge.n	8004ed6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	019b      	lsls	r3, r3, #6
 8004ef8:	f043 0220 	orr.w	r2, r3, #32
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	3301      	adds	r3, #1
 8004f04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	4a08      	ldr	r2, [pc, #32]	; (8004f2c <USB_FlushTxFifo+0x64>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d901      	bls.n	8004f12 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e006      	b.n	8004f20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f003 0320 	and.w	r3, r3, #32
 8004f1a:	2b20      	cmp	r3, #32
 8004f1c:	d0f0      	beq.n	8004f00 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3714      	adds	r7, #20
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	00030d40 	.word	0x00030d40

08004f30 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	3301      	adds	r3, #1
 8004f40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	4a11      	ldr	r2, [pc, #68]	; (8004f8c <USB_FlushRxFifo+0x5c>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d901      	bls.n	8004f4e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e018      	b.n	8004f80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	daf2      	bge.n	8004f3c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004f56:	2300      	movs	r3, #0
 8004f58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2210      	movs	r2, #16
 8004f5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	3301      	adds	r3, #1
 8004f64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	4a08      	ldr	r2, [pc, #32]	; (8004f8c <USB_FlushRxFifo+0x5c>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d901      	bls.n	8004f72 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e006      	b.n	8004f80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	f003 0310 	and.w	r3, r3, #16
 8004f7a:	2b10      	cmp	r3, #16
 8004f7c:	d0f0      	beq.n	8004f60 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3714      	adds	r7, #20
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr
 8004f8c:	00030d40 	.word	0x00030d40

08004f90 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	460b      	mov	r3, r1
 8004f9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	78fb      	ldrb	r3, [r7, #3]
 8004faa:	68f9      	ldr	r1, [r7, #12]
 8004fac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3714      	adds	r7, #20
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b085      	sub	sp, #20
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004fdc:	f023 0303 	bic.w	r3, r3, #3
 8004fe0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ff0:	f043 0302 	orr.w	r3, r3, #2
 8004ff4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3714      	adds	r7, #20
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	f003 0301 	and.w	r3, r3, #1
}
 8005014:	4618      	mov	r0, r3
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005028:	2300      	movs	r3, #0
 800502a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	3301      	adds	r3, #1
 8005030:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	4a13      	ldr	r2, [pc, #76]	; (8005084 <USB_CoreReset+0x64>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d901      	bls.n	800503e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e01b      	b.n	8005076 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	2b00      	cmp	r3, #0
 8005044:	daf2      	bge.n	800502c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005046:	2300      	movs	r3, #0
 8005048:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	f043 0201 	orr.w	r2, r3, #1
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	3301      	adds	r3, #1
 800505a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	4a09      	ldr	r2, [pc, #36]	; (8005084 <USB_CoreReset+0x64>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d901      	bls.n	8005068 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e006      	b.n	8005076 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	f003 0301 	and.w	r3, r3, #1
 8005070:	2b01      	cmp	r3, #1
 8005072:	d0f0      	beq.n	8005056 <USB_CoreReset+0x36>

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3714      	adds	r7, #20
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	00030d40 	.word	0x00030d40

08005088 <__libc_init_array>:
 8005088:	b570      	push	{r4, r5, r6, lr}
 800508a:	4d0d      	ldr	r5, [pc, #52]	; (80050c0 <__libc_init_array+0x38>)
 800508c:	4c0d      	ldr	r4, [pc, #52]	; (80050c4 <__libc_init_array+0x3c>)
 800508e:	1b64      	subs	r4, r4, r5
 8005090:	10a4      	asrs	r4, r4, #2
 8005092:	2600      	movs	r6, #0
 8005094:	42a6      	cmp	r6, r4
 8005096:	d109      	bne.n	80050ac <__libc_init_array+0x24>
 8005098:	4d0b      	ldr	r5, [pc, #44]	; (80050c8 <__libc_init_array+0x40>)
 800509a:	4c0c      	ldr	r4, [pc, #48]	; (80050cc <__libc_init_array+0x44>)
 800509c:	f000 f820 	bl	80050e0 <_init>
 80050a0:	1b64      	subs	r4, r4, r5
 80050a2:	10a4      	asrs	r4, r4, #2
 80050a4:	2600      	movs	r6, #0
 80050a6:	42a6      	cmp	r6, r4
 80050a8:	d105      	bne.n	80050b6 <__libc_init_array+0x2e>
 80050aa:	bd70      	pop	{r4, r5, r6, pc}
 80050ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80050b0:	4798      	blx	r3
 80050b2:	3601      	adds	r6, #1
 80050b4:	e7ee      	b.n	8005094 <__libc_init_array+0xc>
 80050b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ba:	4798      	blx	r3
 80050bc:	3601      	adds	r6, #1
 80050be:	e7f2      	b.n	80050a6 <__libc_init_array+0x1e>
 80050c0:	08005118 	.word	0x08005118
 80050c4:	08005118 	.word	0x08005118
 80050c8:	08005118 	.word	0x08005118
 80050cc:	0800511c 	.word	0x0800511c

080050d0 <memset>:
 80050d0:	4402      	add	r2, r0
 80050d2:	4603      	mov	r3, r0
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d100      	bne.n	80050da <memset+0xa>
 80050d8:	4770      	bx	lr
 80050da:	f803 1b01 	strb.w	r1, [r3], #1
 80050de:	e7f9      	b.n	80050d4 <memset+0x4>

080050e0 <_init>:
 80050e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050e2:	bf00      	nop
 80050e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050e6:	bc08      	pop	{r3}
 80050e8:	469e      	mov	lr, r3
 80050ea:	4770      	bx	lr

080050ec <_fini>:
 80050ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ee:	bf00      	nop
 80050f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050f2:	bc08      	pop	{r3}
 80050f4:	469e      	mov	lr, r3
 80050f6:	4770      	bx	lr
